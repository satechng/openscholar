<?php

/**
 * @file
 * OS File module main module file.
 */

define('OS_FILE_FILEPATH_MULTITENANT', '[vsite:site-purl]/files');
define('OS_FILE_FILEPATH_SINGLETENANT', 'share');

/**
 * Implements hook_ctools_plugin_api().
 *
 * Leave this one.
 */
function os_files_ctools_plugin_api($module, $api){
  if ($module == 'file_entity' && $api == 'file_default_displays') {
    return array(
      'version' => 1
    );
  }
  elseif ($module == 'file_entity' && $api == 'file_type') {
    return array(
      'version' => 1
    );
  }
  elseif ($module == "strongarm" && $api == "strongarm") {
    return array(
      "version" => "1"
    );
  }
}

/**
 * Implements hook_menu().
 */
function os_files_menu(){
  $items = array();

  $items['files/%'] = array(
    'title' => 'File download',
    'page callback' => 'os_files_download',
    'page arguments' => array(
      1
    ),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Returns the path a file should be saved in
 */
function os_files_get_save_path() {
  $filepath = OS_FILE_FILEPATH_SINGLETENANT;
  
  // Are we in multi-tenant? get the file path.
  if (module_exists('vsite') && spaces_get_space()) {
    $filepath = OS_FILE_FILEPATH_MULTITENANT;
  }
  
  return $filepath;
}

/**
 * Implements hook_menu_alter().
 */
function os_files_menu_alter(&$callbacks){
  $items = array();

  if (method_exists(file_stream_wrapper_get_instance_by_scheme('public'), 'getExternalDirectoryPath')) {

    // Generate image derivatives url for our alternate "clean" file path if it is different
    $file_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
    $external_file_path = file_stream_wrapper_get_instance_by_scheme('public')->getExternalDirectoryPath();

    if ($external_file_path != $file_path) {
      $callbacks[$external_file_path . '/styles/%image_style'] = $callbacks[$file_path . '/styles/%image_style'];
      $callbacks[$external_file_path . '/styles/%image_style']['page arguments'] = array(
        count(explode('/', $external_file_path)) + 1
      );
    }
  }
  
  $callbacks['file/%file/edit/ajax'] = $callbacks['file/%file/edit'];
  $callbacks['file/%file/edit/ajax']['delivery callback'] = 'ajax_deliver';
  
  $callbacks['file/%file/delete/ajax'] = $callbacks['file/%file/delete'];
  $callbacks['file/%file/delete/ajax']['delivery callback'] = 'ajax_deliver';
}

function os_files_theme_registry_alter(&$reg){
  unset($reg['oembed']['template']);
  $reg['oembed']['function'] = 'theme_os_files_oembed';
}

function theme_os_files_oembed($vars){
  return render($vars['content']);
}

/**
 * Implements hook_library_alter().
 */
function os_files_library_alter(&$libs, $module) {
  if ($module == 'media') {
    $path = drupal_get_path('module', 'os_files');
    $libs['media_browser_page']['js'][$path.'/theme/os_files.browser.js'] = array('group' => JS_DEFAULT);
    $libs['media_browser_page']['css'][$path.'/theme/os_files.browser.css'] = array('group' => CSS_DEFAULT);
  } 
}

/**
 * Implements hook_file_insert().
 */
function os_files_file_insert($file){
  if ($context = og_context()) {
    $file->skip_og_membership = TRUE;
    og_group('node', $context['gid'], array(
      'entity_type' => 'file',
      'entity' => $file
    ));
  }
}

/**
 * Implements hook_file_type_alter().
 * Ensures no file has the undefined file type
 */
function os_files_file_type_alter(&$types, $file) {
  if (!count($types)) {
    $types[] = 'undefined';
  }
}

/**
 * Return a "Coppy to clip-board" link using clippy library.
 *
 *  @param $url_file
 *    The url the user will coppy.
 *
 *  @param $options
 *    array of options for styling the button
 *      - bgcolor: Background color.
 *      - width: The width of the wrapper for the button and the text.
 *      - height: The height of the wrapper for the button and the text.
 */
function os_files_clippy($url_file, $options = array()){
  global $base_url;

  // Default values of the button style.
  $options += array(
    'bgcolor' => '',
    'height' => 20,
    'width' => 110
  );

  // Location of the flash file.
  $library = libraries_get_path('clippy');
  $path = $base_url . '/' . $library . '/build/clippy.swf';

  // Print out the copy button.
  $html = '
    <object
      classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
      width="' . $options['height'] . '"
      height="' . $options['width'] . '"
      id="clippy">
        <param name="movie" value="' . $path . '"/>
        <param name="allowScriptAccess" value="always" />
        <param name="quality" value="high" />
        <param name="scale" value="noscale" />
        <param NAME="FlashVars" value="text=' . $url_file . '">
        <param name="bgcolor" value=" ' . $options['bgcolor'] . '">
        <embed
          src="' . $path . '"
          width="' . $options['width'] . '"
          height="' . $options['height'] . '"
          name="clippy"
          quality="high"
          allowScriptAccess="always"
          type="application/x-shockwave-flash"
          pluginspage="http://www.macromedia.com/go/getflashplayer"
          FlashVars="text=' . $url_file . '"
          bgcolor="' . $options['bgcolor'] . '"
        />
    </object>
  ';
  return $html;
}

function os_files_form_file_entity_add_upload_alter(&$form, &$form_state) {
  $path = drupal_get_path('module', 'os_files');
  $form['#attached']['css'][] = $path.'/theme/os_files_upload_form.css';
  $form['#attached']['js'][] = $path.'/theme/os_files_upload_form.js';
  
  $form['#step'] = 3;

  $args = $form_state['build_info']['args'];
  /*
   * Set a validator to check that uploaded files are the right type
   * Only display extensions for file types that are allowed
   * Limit the results of the popup file browser to allowed mimetypes
   */
  if (!isset($args[0]['types'])) {
    $args[0]['types'] = array_keys(file_type_get_enabled_types());
  }
  
  if (isset($args[0]['types'])) {
    $form['upload']['#upload_validators']['os_files_upload_validate_file_type'] = array($args[0]['types']);
    $extensions = array();
    $include_pps = FALSE;
    foreach ($form['upload']['#upload_validators']['os_files_upload_validate_file_type'][0] as $type) {
      $extensions = array_merge($extensions, _os_files_extensions_from_type($type));
      if ($type == 'document') {
        $include_pps = TRUE;
      }
    }
    if (empty($args[0]['override_extensions'])) {
      $form['upload']['#upload_validators']['file_validate_extensions'] = array(implode(' ', $extensions));
    }
    
    $types = file_type_get_all_types();
    $mimetypes = array();
    foreach ($types as $type => $t) {
      if (in_array($type, $args[0]['types'])) {
        $mimetypes = array_merge($mimetypes, $t->mimetypes);
      }
    }
    if (!empty($mimetypes)) {
      $form['upload']['#attributes'] = array(
        'accept' => implode(',', $mimetypes).($include_pps?',.pps':''),
      );
      $form['upload']['#pre_render'][] = 'os_files_upload_attributes';
    }
  }
    
  array_unshift($form['#submit'], 'os_files_file_entity_add_upload_submit');
}

function os_files_upload_attributes($element) {
  $element['upload']['#attributes'] = $element['#attributes'];
  return $element;
}

function os_files_upload_validate_file_type(stdclass $file, $types) {
  $errors = array();

  if (!in_array(file_get_type($file), $types)) {
    $errors[] = t('The file of type @file cannot be uploaded here. Only the following may be uploaded at this dialog: @types', array(
      '@file' => file_get_type($file),
      '@types' => implode(', ', $types),
    ));
  }
  
  return $errors;
}

function os_files_file_entity_add_upload_submit(&$form, &$form_state) {
  $form_state['triggering_element']['#id'] = 'edit-submit';
  $file = file_load($form_state['values']['upload']);
  $form_state['values']['type'] = $file->type;

  // The file is uploaded not via a form, there for the entity reference
  // pre-populate doesn't take affect.
  if ($og_context = og_context()) {
    $wrapper = entity_metadata_wrapper('file', $file);
    $wrapper->{OG_AUDIENCE_FIELD}->set(array($og_context['gid']));
    $wrapper->save();
  }
}

function os_files_form_file_entity_edit_alter(&$form, &$form_state){
  $form['filename']['#title'] = t('Title');
  $form['filename']['#description'] = t('Name of file as seen by your site\'s visitors');
  
  $form['media_title'][LANGUAGE_NONE][0]['value']['#title'] = t('Gallery Title');
  
  $form['media_title'][LANGUAGE_NONE][0]['value']['#description'] = t('Title of File in a Gallery.');
  
  $form['media_description'][LANGUAGE_NONE][0]['#title'] = t('Gallery Description');
  $form['media_description'][LANGUAGE_NONE][0]['#description'] = t('Used when file is in a gallery.');
  
  if ($form['type']['#value'] != 'image' && $form['type']['#value'] != 'video') {
    $form['preview']['#access'] = FALSE;
  }
  
  $form['user']['#access'] = FALSE;

  // only display the field if the file is older than 5 minutes
  if (isset($form['#entity'])) {
    $form['replace_upload']['#access'] = (time() - $form['#entity']->timestamp) > 5 * 60;
  }
  else {
    $form['replace_upload']['#access'] = FALSE;
  }
  
  // modify the form when we're getting it through ajax
  // this means we'll be getting it through the media browser
  if (strpos($_GET['q'], 'ajax') !== FALSE) {
    $form['preview']['#access'] = FALSE;
    
    $form['replace_upload']['#access'] = FALSE;
    
    $form['media_title']['#access'] = FALSE;
    $form['media_title'][LANGUAGE_NONE][0]['value']['#value_callback'] = 'os_files_media_title_value';
    
    $form['media_description']['#access'] = FALSE;
    
    $form['actions']['submit']['#attributes'] = array(
      'class' => array('use-ajax-submit'),
    );
    
    $form['actions']['delete']['#attributes'] = array(
      'class' => array('use-ajax-submit'),
    );
    $form['actions']['delete']['#submit'] = array(
      'os_files_edit_delete_ajax_submit'
    );
  }
}

/**
 * Form submission handler for the 'Delete' button for file_entity_edit().
 */
function os_files_edit_delete_ajax_submit($form, &$form_state) {
  $fid = $form_state['values']['fid'];
  $form_state['redirect'] = array('file/' . $fid . '/delete/ajax');
  $form_state['no_redirect'] = FALSE;

  // Clear the page and block caches.
  cache_clear_all();
}

function os_files_form_file_entity_delete_form_alter(&$form, &$form_state) {
  if (strpos($_GET['q'], 'ajax') !== FALSE) {
    $form['actions']['submit']['#attributes'] = array(
      'class' => array('use-ajax-submit'),
    );

    $form['#submit'][] = 'os_files_form_file_delete_submit';
  }

  if (strpos($form_state['file']->uri, 'private') !== 0) {
    $form['#submit'][] = 'os_files_redirect_after_delete_file';
  }

  array_unshift($form['#submit'], 'os_files_save_file_usage');

  $form['#submit'][] = 'os_files_delete_remove_reference';
}

function os_files_form_file_delete_submit(&$form, &$form_state) {
  $form_state['no_redirect'] = TRUE;
  $form['#type'] = 'ajax';
  ctools_include('ajax');
  $form['#commands'][] = ctools_ajax_command_reload();
}

/**
 * When deleting a file the user need to stay files CP.
 */
function os_files_redirect_after_delete_file($form, &$form_state) {
  $form_state['redirect'] = 'cp/content/files';
}

/**
 * Save the file usage before the file usage list is being deleted.
 */
function os_files_save_file_usage($form, &$form_state) {
  $file = $form_state['file'];

  $usage = file_usage_list($file);

  if (empty($usage['file']['node'])) {
    return;
  }

  $form_state['file_usage'] = array_keys($usage['file']['node']);
}

/**
 * When deleting a field through the CP files form we need to remove the
 * reference for the files.
 */
function os_files_delete_remove_reference($form, $form_state) {
  $file = $form_state['file'];
  $operations = array();

  if (empty($form_state['file_usage'])) {
    return;
  }

  foreach (array_chunk($form_state['file_usage'], 10) as $chunk) {
    $operations[] = array('_os_files_delete_remove_reference_finished', array($chunk, $file));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'os_files_delete_remove_reference_finished',
    'title' => t('Removing the file references'),
    'init_message' => t('The references removed procedure has started.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Example Batch has encountered an error.'),
  );

  batch_set($batch);

  batch_process($form_state['redirect']);
}

/**
 * Callback function of the batch API for removing the file reference.
 *
 * @param $nids
 *  List of node IDs to the remove the reference of the file.
 * @param $file
 *  The file object which his reference need to be remove.
 */
function _os_files_delete_remove_reference_finished($nids, $file) {
  $nodes = node_load_multiple($nids);

  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $fields = field_info_instances('node', $wrapper->getBundle());

    // Searching for the field that contain the reference to the file.
    foreach (array_keys($fields) as $field) {
      $info = field_info_field($field);

      // This is a field file, break the loop.
      if ($info['type'] != 'file') {
        continue;
      }

      $file_field = $wrapper->{$field}->value();
      $field_info = field_info_field($field);

      if ($field_info['cardinality'] === 1 || $field_info['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
        if ($file_field['fid'] == $file->fid) {
          $file_field = NULL;
        }
      }
      else {
        // Dealing with a multiple field.
        foreach ($file_field as $delta => $value) {
          if ($value['fid'] == $file->fid) {
            unset($file_field[$delta]);
          }
        }
      }

      $wrapper->{$field}->set($file_field);
    }

    $wrapper->save();
  }
}

/**
 * Finish callback function of the batch API.
 */
function os_files_delete_remove_reference_finished() {
  drupal_set_message(t('The file has been removed.'));
}

/**
 * Set the default value for media_title
 * @param $element
 * @param $input
 * @param $form_state
 * @return
 */
function os_files_media_title_value($element, $input = FALSE, $form_state = array()) {
  if ($input === FALSE) {
    return isset($form_state['values']['filename']) ? $form_state['values']['filename'] : '';
  }
}

/**
 * Modifies the media_internet_add form to better describe what it accepts
 */
function os_files_form_media_internet_add_alter(&$form, &$form_state) {
  $form['providers']['#access'] = FALSE;
  
  $form['embed_code']['#title'] = t('URL or embed code of Internet media');
  $form['embed_code']['#description'] = t('Enter a URL from one of !link or paste embed code from one of the following sites: @sites',
    array(
      '!link' => theme('link', array(
        'path' => 'http://embed.ly/embed/features/providers',
        'text' => t('these providers'),
        'options' => array(
          'attributes' => array(),
          'html' => FALSE
        )
      )),
      '@sites' => implode(', ', media_embed_get_whitelist())
    )
  );
}

/**
 * Implements hook_views_api().
 */
function os_files_views_api(){
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'os_files') . '/includes/views'
  );
}

/**
 * Entry point for vsite aliased file downloads.
 *
 * This allows legacy file paths to exsit that are mapped to paths "domain/vsite/files/file1.pdf"
 */
function os_files_download(){
  $args = func_get_args();
  $scheme = 'public';

  if (module_exists('vsite') && ! file_exists($scheme . '://' . implode('/', $args))) {

    // Add the menu entry as an arg.
    array_unshift($args, 'files');

    $prefix = vsite_get_purl();
    //If we are in a vsite and the file is in a vsite prefixed directory
    if ($prefix && ! file_exists($scheme . '://' . implode('/', $args))) {
      // Add the prefix as an arg.
      array_unshift($args, $prefix);
    }
  }

  // Use the public schema.
  array_unshift($args, 'public');

  // Serve the file via the standard download handler.
  call_user_func_array('file_download', $args);
}

function os_files_entity_info_alter(&$info){
  $info['file']['view modes'] += array(
    'os_files_xxlarge' => array(
      'label' => t('Giant Image (1000px)'),
      'custom settings' => TRUE
    ),
    'os_files_xlarge' => array(
      'label' => t('Huge Image (800px)'),
      'custom settings' => TRUE
    ),
    'os_files_large' => array(
      'label' => t('Large Image (600px)'),
      'custom settings' => TRUE
    ),
    'os_files_med' => array(
      'label' => t('Medium Image (400px)'),
      'custom settings' => TRUE
    ),
    'os_files_small' => array(
      'label' => t('Small Image (200px)'),
      'custom settings' => TRUE
    ),
    'os_files_link_icon' => array(
      'label' => t('Link with icon'),
      'custom settings' => TRUE
    ),
    'os_files_link' => array(
      'label' => t('Link with no icon'),
      'custom settings' => TRUE
    )
  );

  $info['file']['bundles']['undefined'] = array(
    'label' => 'Undefined',
    'admin' => array(
      'path' => 'admin/structure/file-types/manage/%file_type',
      'real path' => 'admin/structure/file-types/manage/undefined',
      'bundle argument' => 4
    )
  );

  $info['file']['bundles']['executable'] = array(
    'label' => 'Executable',
    'admin' => array(
      'path' => 'admin/structure/file-types/manage/%file_type',
      'real path' => 'admin/structure/file-types/manage/executable',
      'bundle argument' => 4
    )
  );
}

function os_files_image_default_styles(){
  $styles = array(
    'os_files_xxlarge' => array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 1000,
            'height' => 1000,
            'upscale' => 0
          )
        )
      )
    ),
    'os_files_xlarge' => array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 800,
            'height' => 800,
            'upscale' => 0
          )
        )
      )
    ),
    'os_files_large' => array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 600,
            'height' => 600,
            'upscale' => 0
          )
        )
      )
    ),
    'os_files_medium' => array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 400,
            'height' => 400,
            'upscale' => 0
          )
        )
      )
    ),
    'os_files_small' => array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => 200,
            'height' => 200,
            'upscale' => 0
          )
        )
      )
    )
  );

  return $styles;
}

function os_files_file_default_displays(){
  $keys = array(
    'image__os_files_xxlarge__os_files_image' => array(
      'image_style' => 'os_files_xxlarge',
      'alt' => '',
      'title' => '',
    ),
    'image__os_files_xlarge__os_files_image' => array(
      'image_style' => 'os_files_xlarge',
      'alt' => '',
      'title' => '',
    ),
    'image__os_files_large__os_files_image' => array(
      'image_style' => 'os_files_large',
      'alt' => '',
      'title' => '',
    ),
    'image__os_files_med__os_files_image' => array(
      'image_style' => 'os_files_medium',
      'alt' => '',
      'title' => '',
    ),
    'image__os_files_small__os_files_image' => array(
      'image_style' => 'os_files_small',
      'alt' => '',
      'title' => '',
    ),
    'image__default__os_files_image' => array(    // all of the above are deprecated
      'image_style' => 'large',
      'alt' => '',
      'title' => '',
    )
  );

  foreach ( file_type_get_enabled_types() + array(
    'default' => array()
  ) as $type => $info ) {
    $keys["{$type}__preview__file_field_media_large_icon"] = array();
    $keys["{$type}__os_files_link__os_link"] = array('icon' => FALSE);
    $keys["{$type}__os_files_link_icon__os_link"] = array();
  }

  $displays = array();
  foreach ( $keys as $k => $settings ) {
    $displays[$k] = ( object ) array(
      'api_version' => 1,
      'name' => $k,
      'status' => 1,
      'weight' => 5,
      'settings' => $settings
    );
  }

  return $displays;
}

/**
 * File displays are {file_type}__{view_mode}__{formatter}
 * Why they have to be called something different, I don't know
 */
function os_files_file_formatter_info(){
  $formatters = array();
  
  $formatters['os_files_image'] = array(
    'label' => t('Image'),
    'default settings' => array(),
    'view callback' => 'os_files_file_formatter_os_files_image',
    'settings callback' => 'os_files_file_formatter_os_files_settings',
  );

  $formatters['os_link'] = array(
    'label' => t('Link To File'),
    'default settings' => array(
      'download' => TRUE,
      'icon' => TRUE,
    ),
    'view callback' => 'os_files_file_formatter_file_link',
    'settings callback' => 'os_files_file_formatter_file_link_settings'
  );

  return $formatters;
}

/**
 * Renders an image at a given size
 * Automatically selects the image style to use based on the dimensions set by the user
 */
function os_files_file_formatter_os_files_image($file, $display, $langcode) {
  $breakpoints = array(
    'os_files_small' => 200,
    'os_files_medium' => 400,
    'os_files_large' => 600,
    'os_files_xlarge' => 800,
    'os_files_xxlarge' => 1000
  );
  
  $width = isset($file->override['attributes']['width']) 
            ? $file->override['attributes']['width'] 
            : $file->image_dimensions['width'];
  $height = isset($file->override['attributes']['height']) 
            ? $file->override['attributes']['height'] 
            : $file->image_dimensions['height'];
  
  
  $formatter = '';
  foreach ($breakpoints as $style => $dim) {
    if ($width <= $dim && $height <= $dim) {
      $formatter = $style;
      break;
    }
  }
  if (!$formatter) {
    $formatter = 'os_files_xxlarge';
  }
  
  $display['settings']['image_style'] = $formatter;
  return file_entity_file_formatter_file_image_view($file, $display, $langcode);
}

/**
 * Generates a link to the file
 * This will either be a link to the direct download of a file
 * or to the file's view path (file/$id). Direct download is the default
 * 
 * This formatter is @deprecated. Kept around in case anyone is using it.
 */
function os_files_file_formatter_file_link($file, $display, $langcode){
  $title = field_get_items('file', $file, 'media_title', $langcode);
  $title = isset($title[0]) ? $title[0]['value'] : file_create_url($file->uri);

  $path = $display['settings']['download'] ? file_create_url($file->uri) : file_entity_uri($file);

  if (empty($file->override['wysiwyg'])) {
    return array(
      'icon' => array(
        '#theme' => 'file_icon',
        '#file' => $file,
        '#access' => $display['settings']['icon'],
      ),
      'link' => array(
        '#theme' => 'link',
        '#href' => $path,
        '#path' => $path,
        '#text' => $title,
        '#options' => array(
          'html' => FALSE,
          'attributes' => array()
        )
      )
    );
  }
  else {
    // generate an image to use in the wysiwyg. The wysiwyg only accepts images, currently
  }
}

function os_files_media_token_to_markup_alter(&$element, $tag_info, $settings){
  // this block is @deprecated. I think there's one instance of it being used.
  if (isset($tag_info['render_fid']) && $element['content']['file']['#view_mode'] == 'os_files_link') {
    $file = &$element['content']['file'];
    unset($file['icon']);
    $image = file_load($tag_info['render_fid']);
    $file['link']['#text'] = theme('image_style', array(
      'path' => $image->uri,
      'style_name' => 'os_files_medium'
    ));
    $file['link']['#options']['html'] = TRUE;
  }
  
  $file = &$element['content']['file'];
  if (isset($file['#theme']) && $file['#theme'] == 'image_style') {
    $file['#theme'] = 'image';
    $file['#path'] = image_style_url($file['#style_name'], $file['#path']);
    $class = 'file-'.drupal_html_class($file['#style_name']);
    if (!isset($file['#attributes']['class']) || !in_array($class, $file['#attributes']['class'])) {
      $file['#attributes']['class'][] = $class;
    } 
  }
  // hide the description field when embedding
  // no one wants it here
  if (!empty($element['content']['media_description'])) {
    $element['content']['media_description']['#access'] = false;
  }
}

/**
 * File Settings.
 */
function os_files_media_browser_params_alter(&$media_params){
  if (isset($media_params['id'])) {
    if ($media_params['id'] == 'media_wysiwyg') {
      $allowed = array('image', 'audio', 'video', 'html');
      if (is_array($media_params['types'])) {
        $media_params['types'] = array_intersect($media_params['types'], $allowed);
      }
      else {
        $media_params['types'] = $allowed;
      }
    }
    elseif ($media_params['id'] == 'os_link_wysiwyg') {
      $media_params['schemes'] = array('public' => 'public');
    }
  }
  else {
    $media_params['types'][] = 'document';
    $media_params['types'][] = 'undefined';
  }
  
  // Are we in multi-tenant? get the file path.
  if (module_exists('vsite') && spaces_get_space()) {
    $filepath = OS_FILE_FILEPATH_MULTITENANT;
  }
  else {
    $filepath = OS_FILE_FILEPATH_SINGLETENANT;
  }

  if (! empty($filepath) && (empty($media_params['file_directory']) || ! strstr($media_params['file_directory'], $filepath))) {
    if (! empty($media_params['file_directory'])) {
      // Prepend the file path.
      $media_params['file_directory'] = $filepath . "/" . $media_params['file_directory'];
    }
    else {
      // Set the default file path.
      $media_params['file_directory'] = $filepath;
    }
  }
}

/**
 * Alter all saved files reguardless of where they are saved from
 *
 * @param Entity $file
 */
function os_files_field_widget_form_alter(&$elements, &$form_state, $context){

  //This is a widget that handles files, lets assure that the file makes it to the correct location.
  if (in_array($context['field']['type'],array('imagefield_crop','image','file')) && isset($context['instance']['settings']['file_directory'])) {

    // We are in a vsite and the filepath is not already set to the correct location.
    if(module_exists('vsite') && spaces_get_space() && strpos(trim($context['instance']['settings']['file_directory'], '/'), OS_FILE_FILEPATH_MULTITENANT) !== 0){
      //Modify the instance to prefix it with the proper tokenized file directory
      $context['instance']['settings']['file_directory'] = OS_FILE_FILEPATH_MULTITENANT.'/'.trim($context['instance']['settings']['file_directory'], '/');
      $upload_location = file_field_widget_uri($context['field'], $context['instance']);
      foreach (element_children($elements) as $delta) {
        $elements[$delta]['#upload_location'] = $upload_location;
      }
    }
  }

  if ($context['instance']['widget']['type'] == 'media_generic') {
    $elements['#process'][] = 'media_element_process';
    $elements['#process'][] = 'os_files_media_widget_process';
  }
}

/**
 * Alters the text of the media generic widget
 */
function os_files_media_widget_process($element, $form_state, $form) {
  $element['select']['#title'] = t('Choose File');
  return $element;
}

/**
 * Alters text of Add Another button for media generic widgets
 */
function os_files_form_node_form_alter(&$form, &$form_state) {
  if (isset($form['field_upload'])) {
    $form['field_upload'][LANGUAGE_NONE]['add_more']['#value'] = t('Add Another');
  }
}

/**
 * Alters the titles of the Media Browser tabs to more friendly terms
 */
function os_files_media_browser_plugins_alter(&$output){
  unset($output['media_default--media_browser_my_files']);
  $output['upload']['#title'] = t('My Computer');
  $output['media_default--media_browser_1']['#title'] = t('My Library');
  
  // add an area to the views form to put the file edit form
  $html = &$output['media_default--media_browser_1']['#markup'];
  $html = str_replace(array('Submit', 'File name'), array('Insert', 'Search'), $html);
  $html .= '<div id="file-edit-section"><div id="file-edit-no-selection">Select a file to edit it.</div></div>';
}

function os_files_media_wysiwyg_allowed_view_modes_alter(&$view_modes, $file){
  $scheme = file_uri_scheme($file->uri);
  switch ($scheme) {
    case 'oembed' :
      $temp['default'] = $view_modes['default'];
      $view_modes = $temp;
      break;
    case 'public' :
      $type = file_get_type($file);
      if ($type == 'image') {
        $temp['default'] = $view_modes['default'];
      }
      else { // until there is support for the audio or video tags, this is the best we can do for that kind of file.
        $temp['os_files_link'] = $view_modes['os_files_link'];
        $temp['os_files_link_icon'] = $view_modes['os_files_link_icon'];
      }
      $view_modes = $temp;
      break;
  }
}

/**
 * Adds wmode to oembed requests
 */
function os_files_oembed_request_alter(&$attributes, $provider, $url) {
  $attributes['wmode'] = 'opaque';
}

/**
 * Implements hook_preprocess_media_thumbnail.
 * 
 * Displays the immutable origname as well as the mutable filename.
 */
function os_files_preprocess_media_thumbnail(&$vars) {
  $element = &$vars['element'];
  $filename = basename($element['#file']->uri);
  if ($element['#file']->filename != $filename) {
    $element['#name'] = $element['#file']->filename.' ('.$filename.')';
  }
}

/**
 * Implements hook_preprocess_image_formatter.
 * 
 * Ensures that the alt and title attributes are filled in from the field values
 */
function os_files_preprocess_image_formatter(&$variables) {
  $item = &$variables['item'];
  if (!empty($item['field_file_image_alt_text'])) {
    $item['alt'] = $item['field_file_image_alt_text'][LANGUAGE_NONE][0]['value'];
  }
  elseif (empty($item['alt'])) {
    $item['alt'] = $item['filename'];
  }
  
  if (!empty($item['field_file_image_title_text'])) {
    $item['title'] = $item['field_file_image_title_text'][LANGUAGE_NONE][0]['value'];
  }
  elseif (empty($item['title'])) {
    $item['title'] = $item['filename'];
  }
}

/**
 * Implements hook_file_download().
 *
 * Serve public files from a vsite directory.
 */
function os_files_file_download($uri){
  global $user;
  $path = file_uri_target($uri);
  $scheme = file_uri_scheme($uri);

  if ($scheme != 'public' || ! module_exists('vsite')) {
    return NULL;
  }

  $prefix = vsite_get_purl();

  // Public file access for vsite paths.
  if (strpos($path, $prefix . '/') === 0) {

    // Get the file record based on the URI. If not in the database just return.


    $files = file_load_multiple(array(), array(
      'uri' => $uri
    ));
    if (count($files)) {
      foreach ( $files as $item ) {
        // Since some database servers sometimes use a case-insensitive
        // comparison by default, double check that the filename is an exact
        // match.
        if ($item->uri === $uri) {
          $file = $item;
          break;
        }
      }
    }
    if (! isset($file)) {
      return;
    }

    return file_get_content_headers($file);
  }
}

/**
 * Implements hook_views_alter().
 *
 * Adds necessary relationship and filters to Media Browser view to make it
 * work with spaces.
 */
function os_files_views_default_views_alter(&$views){
  if (!module_exists('vsite') || !isset($views['media_default'])) {
    return;
  }
  $view = $views['media_default'];

  // Link in Files related via file_usage.
  $view->add_item('default', 'filter', 'spaces', 'current');
}

/**
 * Media Gallery adds some fields to every file bundle. We don't want one of
 * them.
 */
function os_files_modules_installed($modules){
  if (in_array('media_gallery', $modules)) {
    _os_files_clean_up_fields();
  }
}

/**
 * Remove field_license because no one will use it
 * Add title and description to file types media_gallery didn't add them to
 */
function _os_files_clean_up_fields(){
  field_delete_field('field_license');
  if ($title = field_info_instance('file', 'media_title', 'image')) {
    $descrip = field_info_instance('file', 'media_description', 'image');
    $file_types = file_type_get_all_types();
    foreach ( $file_types as $bundle => $info ) {
      if (! field_info_instance('file', 'media_title', $bundle)) {
        $title_copy = $title;
        $title_copy['entity_type'] = 'file';
        $title_copy['bundle'] = $bundle;
        field_create_instance($title_copy);
      }

      if (! field_info_instance('file', 'media_description', $bundle)) {
        $descrip_copy = $descrip;
        $descrip_copy['entity_type'] = 'file';
        $descrip_copy['bundle'] = $bundle;
        field_create_instance($descrip_copy);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * Formatter that splits images into its own list Used in conjunction with
 * jCarousel.
 */
function os_files_field_formatter_info(){
  $formatters = array();

  $formatters['os_files_image_list'] = array(
    'label' => t('Images as Separate List'),
    'field types' => array(
      'file'
    ),
    'multiple values' => FIELD_BEHAVIOR_DEFAULT
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 *
 * This formatter renders a list of files as two elements:
 *  1. A list of images
 *  2. A table of everything else
 */
function os_files_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $elements = array(
    '#type' => 'markup',
    '#theme' => '',
    '#attributes' => array(
      'class' => array(
        'field-items'
      )
    )
  );
  switch ($display['type']) {
    case 'os_files_image_list' :
      $images = array();
      $videos = array();
      $other = array();
      foreach ( $items as $i ) {
        if ($i['type'] == 'image') {
          $title = field_get_items('file', ( object ) $i, 'field_file_image_title_text');
          $title = isset($title[0]) ? $title[0]['value'] : $i['filename'];
          $alt = field_get_items('file', ( object ) $i, 'field_file_image_alt_text');
          $alt = isset($alt[0]) ? $alt[0]['value'] : $i['filename'];
          $image_info = image_get_info($i['uri']);
          $images[] = array(
            'href' => file_create_url($i['uri']),
            'title' => theme('image_style', array(
              'path' => $i['uri'],
              'style_name' => 'thumbnail',
              'title' => $title,
              'alt' => $alt,
              'width' => $image_info['width'],
              'height' => $image_info['height']
            )),
            'html' => TRUE,
            'attributes' => array(
              'class' => array(
                'colorbox'
              )
            )
          );
        }
        elseif (file_uri_scheme($i['uri']) == 'oembed') {
          $url = urldecode(file_uri_target($i['uri']));
          $video_thumb = _os_files_video_thumb($i);          
          $videos[] = ($video_thumb) ? $video_thumb : array(
            '#type' => 'oembed_bare',
            '#url' => $url,
            '#options' => array(
              'maxwidth' => 350,
            )
          );
        }
        elseif (file_uri_scheme($i['uri']) == 'embed') {
          $file = (object)$i;
          $file->override['width'] = 300;
          $videos[] = file_view($file, 'default');
        }
        else {
          $extension = strtolower(substr(strrchr($i['filename'], '.'), 1));
          $href = file_create_url($i['uri']);
          $text = $i['description'] ? $i['description'] : $i['filename'];
          $other[] = array(
            array(
              'data' => theme('file_icon', array(
                'file' => ( object ) $i
              )),
              'class' => array(
                'mime',
                'mime-' . $extension
              )
            ),
            array(
              'data' => l($text, $href),
              'class' => array(
                'file'
              )
            ),
            array(
              'data' => format_size($i['filesize']),
              'class' => array(
                'size'
              )
            )
          );
        }
      }

      if (!empty($images)) {
        $elements['images'] = array(
          '#theme' => 'links',
          '#links' => $images,
          '#attributes' => array(
            'class' => array(
              'os-files-image-list',
              'jcarousel-skin-default'
            )
          )
        );
        if (module_exists('jcarousel')) {
          $elements['images']['#pre_render'][] = 'os_files_jcarousel_add';
        }
      }

      if (!empty($videos)) {
        $elements['videos'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('os-files-videos-list'),
          )
        );
        foreach ($videos as $v) {
          $elements['videos'][] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('os-files-video-single'),
            ),
            'video' => $v,
          );
        }
      }

      if (!empty($other)) {
        $elements['other'] = array(
          '#theme' => 'table',
          '#rows' => $other,
          '#header' => array(),
          '#attributes' => array(
            'class' => array(
              'os-files-other-list'
            )
          )
        );
      }
      break;
  }

  return $elements;
}

function os_files_jcarousel_add($elements){
  jcarousel_add('os-files-image-list');
  return $elements;
}

/**
 * Implements hook_views_data_alter().
 *
 * Adds file_managed as a table the pseudo-table spaces can be joined to.
 * This enables files to use the spaces_current_space filter
 */
function os_files_views_data_alter(&$data){
  $data['spaces']['table']['join']['file_managed'] = array(
    'left_field' => 'fid',
    'field' => 'id'
  );
}

function os_files_file_default_types() {
  $types = array();

  $types['executable'] = (object) array(
    'api_version' => 1,
    'type' => 'executable',
    'label' => t('Executable'),
    'description' => t('An <em>Executable</em> file is a program or compressed collection of files.'),
    'mimetypes' => array(
      'application/x-msdos-program',
      'application/zip',
      'application/octet-stream',
      'application/x-gzip',
      'application/x-compressed',
    ),
    'streams' => array(
      'public',
    ),
  );

  return $types;
}

function os_files_file_default_types_alter(&$types){
  $types['image']->mimetypes = array_merge($types['image']->mimetypes, array(
    // *.ico files
    'image/ico',
    'application/ico',
    'application/x-ico',
    'application/x-win-bitmap',
    'image/x-win-bitmap'
  ));

  $types['video']->mimetypes = array_merge($types['video']->mimetypes, array(
    // *.mov files
    'video/x-quicktime',
    'image/mov',
    'audio/aiff',
    'audio/x-midi',
    'audio/x-wav',
    'video/avi',
    // *.mp4 files
    'video/mp4v-es',
    'audio/mp4',
    // *.m4v files
    'video/mp4v-es',
    // *.mpeg files
    'video/mpeg',
    // *.avi files
    'video/avi',
    'video/msvideo',
    'video/xmpg2',
    'application/x-troff-msvideo',
    'audio/aiff',
    'audio/avi',
    // *.ogg files
    'application/ogg',
    'audio/x-ogg',
    'application/x-ogg',
    // *.wmv files
    'video/x-ms-wmv',
    'text/oembed'
  ));
  $types['video']->streams[] = 'oembed';

  $types['audio']->mimetypes = array_merge($types['audio']->mimetypes, array(
    // *.mp3 files
    'audio/x-mpeg',
    'audio/mp3',
    'audio/x-mp3',
    'audio/mpeg3',
    'audio/x-mpeg3',
    'audio/mpg',
    'audio/x-mpg',
    'audio/x-mpegaudio',
    // *.m4a files
    'audio/mp4',
    // *.ogg files  - Ogg's foundation recommends *.ogg only be used for audio
    'application/ogg',
    'audio/x-ogg',
    'application/x-ogg'
  ));

  $types['document']->mimetypes = array_merge($types['document']->mimetypes, array(
    // *.doc files
    'application/vnd.msword',
    'application/vmd.ms-word',
    'application/vnd.ms-excel',
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-office',
    'application/doc',
    'appl/text',
    'application/winword',
    'application/word',
    'application/x-msw6',
    'application/x-msword',
    // *.docx files
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    // *.xlsx files
    'application.vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    // *.pptx files
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    // *.ppsx files
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
    // *.odt files
    'application/x-vnd.oasis.opendocument.text',
    // *.ods files
    'application/x-vnd.oasis.opendocument.spreadsheet',
    // *.odp files
    'application/x-vnd.oasis.opendocument.presentation',
    'application/x-wtml',
    'application/x-wtt',
    'application/x-wwtfig'
  ));

  $types['document']->mimetypes = array_diff($types['document']->mimetypes, array('text/oembed'));
  $types['document']->streams = array_diff($types['document']->streams, array('oembed'));
}

/**
 * Implements hook_stream_wrappers_alter().
 *
 * Used to extend the public stream wrapper.
 *
 * @param array $wrappers
 */
function os_files_stream_wrappers_alter(&$wrappers){

  // Use OS Stream Wrapper.
  if (isset($wrappers['public'])) {
    $wrappers['public']['class'] = 'OSPublicStreamWrapper';
  }
}

/**
 * @function _os_files_video_thumb
 * 
 * When colorbox is present, wraps thumbnail of video, with link to colorbox of embedded player
 */
function _os_files_video_thumb($file) {
  if (!module_exists('colorbox')) {
    return FALSE;
  }

  $url = urldecode(file_uri_target($file['uri']));
  $id = 'embed-colorbox-' . $file['fid'];

  //get dimensions.  scale down to preset max size if needed.
  if ($data = oembedcore_oembed_data($url)) {
    $w = $data->width;
    $h = $data->height;
    $w_max = 500;
    $h_max = 500;
    
    if ($w > $w_max) {
      $w = $w_max;
      $ratio = $w/$data->width;
      $h = $ratio * $h;
    }
    
    if ($h > $h_max) {
      $h = $h_max;
      $ratio = $h/$data->height;
      $w = $ratio * $data->height;
    }
  } else {
    $w = $h = 500;
  }
  
  $filebox = array(
    '#type' => 'oembed',
    '#url' => $url,
    '#options' => array('maxwidth' => $w),
  );
  
  $box_html = drupal_render($filebox); //oembed_bare doesn't do anything useful with prefix, suffix, or attributes...
  $box_html = '<div style="display:none;"><div id="'.$id.'" style="overflow: hidden !important">' . $box_html . '</div></div>';
  
  $video = array(
    '#type' => 'oembed_thumbnail',
    '#prefix' => '<div class="oembed"><a href="?innerWidth='.$w.'&innerHeight='.$h.'&inline=true#' . $id . '" class="colorbox-inline">',
    '#suffix' => '<span class="video-indicator"> </span></a></div>' . $box_html,
    '#url' => $url,
    '#attributes' => array('width' => '250px'),
    '#options' => array(),
  );

  return $video;
}

function _os_files_extensions_from_type($type) {
  $types = &drupal_static(__FUNCTION__, array());
  
  if (empty($types)) {
    $types['audio'] = array(
      'mp3',
      'oga',
      'm4a',
    );
    $types['video'] = array(
      'mov',
      'mpeg',
      'mp4', 
      'm4v',
      'avi',
      'ogg',
      'ogv',
      'wmv',
    );
    $types['image'] = array(
      'jpg',
      'jpeg',
      'gif',
      'png',
      'ico',
    );
    $types['document'] = array(
      'txt',
      'pdf',
    	'doc',
      'docx',
      'xls',
      'xlsx',
      'ppt',
      'pptx',
      'pps',
      'ppsx',
      'odt',
      'ods',
      'odp',
      'xml',
      'tex',
      'wtml',
      'wtt',
      'wwtfig'
    );

    $types['executable'] = array(
      'zip',
      'tgz',
      'gz',
      'exe'
    );
  }
  
  return isset($types[$type])?$types[$type]:array();
}

/**
 * Return the list of fields name which may contain reference to non existed
 * files.
 */
function os_files_file_fields() {
  $field_instances = field_info_instances('node');
  $file_fields = array();

  foreach ($field_instances as $bundle => $instances) {
    foreach ($instances as $instance) {
      $field_info = field_info_field($instance['field_name']);

      if (!in_array($field_info['type'], array('file', 'imagefield_crop'))) {
        continue;
      }

      $file_fields[] = $instance['field_name'];
    }
  }

  $file_fields = array_unique($file_fields);

  return $file_fields;
}

/**
 * Adds worldwide telescope mimetypes and extensions to Drupal
 */
function os_files_file_mimetype_mapping_alter(&$mimes) {
  $types = array(
    'application/x-wtt' => 'wtt',
    'application/x-wtml' => 'wtml',
    'application/x-wwtfig' => 'wwtfig'
  );

  foreach ($types as $mime => $ext) {
    $key = max(array_keys($mimes['mimetypes'])) + 1;
    $mimes['mimetypes'][$key] = $mime;
    $mimes['extensions'][$ext] = $key;
  }
}