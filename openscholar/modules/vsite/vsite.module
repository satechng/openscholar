<?php
// $Id$


/**
 * @file
 * A virtual-site (VSite) is a node that is a "group".
 */

include_once ('vsite.features.inc');
include_once ('includes/vsite.inc');

//module_load_include('inc', 'spaces', 'spaces.overrides');

/**
 * Defines the default vsites per user.
 */
define('VSITE_PER_USER_DEFAULT', 1);

/**
 * Returns the current vsite (space).
 */
function vsite_get_vsite($sid = FALSE, $reset = FALSE){
  if ($sid && intval($sid)) {
    $vsite = spaces_load('og', $sid, $reset);
  }
  else {
    $vsite = spaces_get_space();
  }

  if ($vsite && $vsite->type == 'og') {
    return $vsite;
  }

  return FALSE;
}

/**
 * Returns the current purl prefix, or empty string if none found.
 *
 * @param object $vsite
 */
function vsite_get_purl($vsite = FALSE){
  if (! $vsite) {
    $vsite = spaces_get_space();
  }

  return ! empty($vsite->group) ? $vsite->group->purl : '';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form.
 *
 * Hides the comment settings form from the VSites.
 */
function vsite_form_node_form_alter(&$form, &$form_state, $form_id){
  if (og_is_group_type('node', $form['#bundle'])) {
    $form['comment_settings']['#access'] = FALSE;
    $form['comment_settings']['comment']['#default_value'] = 1;
  }
  // Prepares the node form for alias preview with some markup customizations.
  $form['#after_build'][] = 'vsite_node_form_after_build';
  drupal_add_js(drupal_get_path('module', 'vsite') . '/vsite.pathauto.js');
}

/**
 * After build callback for node_form().
 *
 * Customizes path alias fields to match user expectations.
 *
 * @see vsite_form_node_form_alter()
 */
function vsite_node_form_after_build($form) {
  if (!module_exists('vsite_domain')) {
    return;
  }
  // Prepares a field prefix to store this site's path.
  $field_prefix = rtrim(url('<front>', array('absolute' => TRUE)), '/');
  // Adds the prefix to the custom alias field on the node form.
  $form['path']['alias']['#field_prefix'] = "$field_prefix/";
  // Removes part of the default description provided by pathauto.
  // Originally it advises users to "use relative paths",
  // but the field prefix makes that clear.
  // Also, it originally says "don't use trailing slash or it won't work",
  // but this type of input is automatically removed via javascript.
  // @see vsite.pathauto.js
  $form['path']['alias']['#description'] = t('Optionally specify an alternative URL by which this content can be accessed. For example, type "about" when writing an about page.');
  // If this is a vsite...
  if (module_exists('vsite') && $purl = vsite_get_purl()) {
    // And if this node form contains an existing alias value...
    if ($original = $form['path']['alias']['#value']) {
      // Removes the purl from the editable field value
      // in order to match user expectations: the purl must in the alias,
      // so the user should not appear to have the option to remove it.
      // Even if the purl is not part of the field value, it will be added.
      // @see _vsite_alter_node_path_settings()
      $new = substr($original, strlen($purl) + 1);
      $form['path']['alias']['#value'] = $new;
    }
  }
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent accidental delete of VSites, by hardening the confirmation page.
 */
function vsite_form_node_delete_confirm_alter(&$form, $form_state) {
  $node = $form['#node'];
  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  if (!in_array($node->type, $group_types)) {
    // Not a group node.
    return;
  }

  $form['vsite_name'] = array(
    '#title' => t('Warning! You are about to delete your VSITE!'),
    '#description' => t('Enter the VSite name.'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#element_validate' => array('vsite_delete_vsite_confirm_title'),
  );
}

/**
 * Validate handler; Verify the node title is like the user entered.
 */
function vsite_delete_vsite_confirm_title($element, &$form_state) {
  $node = node_load($form_state['values']['nid']);
  if (trim($node->title) != trim($form_state['values']['vsite_name'])) {
    form_error($element, t('Title does not match.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form.
 *
 * Allow adding the Drush path to later process on group deletion.
 *
 * @see vstite_node_delete().
 */
function vsite_form_og_ui_admin_settings_alter(&$form, &$form_state, $form_id){
  $form['os_drush_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Drush path'),
    '#description' => t('Enter the full path for Drush, if you want the queue to be processed as soon as a group is deleted. If empty, then it is up tp you to invokde <code>drush queue-run og_membership_orphans</code>'),
    '#default_value' => variable_get('os_drush_path', FALSE),
  );

  $form['os_drush_path']['#attributes'] = $form['og_orphans_delete']['#attributes'];
  $form['os_drush_path']['#states'] = $form['og_orphans_delete']['#states'];
}

/**
 * Implements hook_node_delete().
 */
function vsite_node_delete($node) {
  global $language;
  if (!og_is_group('node', $node)) {
    // Not a group node.
    return;
  }

  // Invalidate the VSite from Purl's cache.
  $cache = cache_get('purl_modifiers_' . $language->language);
  if (!empty($cache->data) && !empty($cache->data['vsite_path'][$node->purl])) {
    db_delete('purl')
      ->condition('id', $node->nid)
      ->execute();

    purl_modifiers(NULL, TRUE);
  }

  if (!variable_get('og_use_queue', FALSE)) {
    // Queue isn't used.
    return;
  }

  if (!$drush_path = variable_get('os_drush_path', FALSE)) {
    // No Drush path provided.
    return;
  }

  shell_exec($drush_path . ' queue-run og_membership_orphans');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for OS Settings form.
 *
 * Adds vsite related settings
 */
function vsite_form_os_settings_form_alter(&$form, &$form_state, $form_id){

  $subsite_bundles = variable_get('subsite_bundles',array('personal','project'));
  $subsite_parents = variable_get('subsite_parents',array('department'));

  $subsite_ref_field = field_info_field('field_group_parent');
  if(!$subsite_ref_field){
    //If the field has not been added set the default to none
    $subsite_bundles = $subsite_parents = array();
  }

  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  $form['subsite_parents'] = array(
    '#type' => 'checkboxes',
    '#options' => drupal_map_assoc($group_types),
    '#title' => t('Parent Sites'),
    '#default_value' => $subsite_parents,
  );

  $form['subsite_bundles'] = array(
    '#type' => 'checkboxes',
    '#options' => drupal_map_assoc($group_types),
    '#title' => t('Subsite Bundles'),
    '#default_value' => $subsite_bundles,
  );

  $form['#submit'][] = 'vsite_os_settings_subsites_form_submit';
}

/**
 * Returns the default value for the homepage path.
 *
 * @return array
 */
function vsite_group_default_homepage_value($entity_type, $entity, $field, $instance, $langcode){
  global $base_url;

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  // Is this a group node
  if (og_is_group_type($entity_type, $bundle) && isset($entity->purl)) {
    // When a site is first created it does not have a domain provider, use the
    // path provider that is attached to the entity, we can't use the standard
    // purl modifier here because the entry has not been made in the table yet
    return array(
      0 => array(
        'title' => '',
        'url' => url($entity->purl['value'], array(
          'base_url' => variable_get('purl_base_domain', $base_url),
          'absolute' => TRUE
        ))
      )
    );
  }
}

/**
 * Implements hook_custom_theme().
 */
function vsite_custom_theme(){
  _vsite_purl_init();

  if (($space = spaces_get_space()) && (! module_exists('cp') || ! cp_use_cp_theme())) {
    //If the space is enabled correctly then set the custom theme
    ctools_include('themes', 'os');
    $theme = os_theme_get();
    return $theme;
  }
}

/**
 * Implements hook_spaces_presets_alter().
 *
 * Alter the space presets to add vsite specific information.
 */
function vsite_spaces_presets_alter(&$presets) {
  ctools_include('path', 'vsite');

  // Alter the preset to include the pathauto settings for nodes prefixed with
  // the purl path
  $pathauto_settings = _vsite_get_pathauto_settings();
  foreach ($presets as $name => &$preset) {
    if (substr($name, 0, 3) == "os_") {
      $preset->value['variable'] = array_merge($pathauto_settings, $preset->value['variable']);
    }
  }
}

/**
 * Implements hook_spaces_plugins().
 */
function vsite_spaces_plugins(){
  $plugins = array();
  $plugins['vsite'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'vsite') . '/plugins',
      'file' => 'vsite.inc',
      'class' => 'vsite',
      'parent' => 'space_og'
    )
  );
  return $plugins;
}

/**
 * Implements hook_registry_alter().
 *
 * Alter the registry to tell spaces_og groups to use the vsite plugin by
 * default.
 */
function vsite_spaces_registry_alter(&$registry){
  if (isset($registry['types']['og'])) {
    $registry['types']['og']['plugin'] = 'vsite';
  }
}

/**
 * Returns whether current user may create additional vsites.
 *
 * Handles access rules for when site owner is attempting to create a another
 * site
 *
 * @param array $vsites
 *   An array as returned by vsite_get_vsite_by_user()
 *
 * @return bool
 *   TRUE if the user has access to create a site under these conditions.
 */
function vsite_vsite_exists_access($vsites = array()) {
  // First, checks that the site would be created on the correct domain.
  // If this function is being called on the site register form...
  $path_site_register = (bool) ($_GET['q'] == 'site/register');
  if ($path_site_register) {
    // Checks that the form is being accessed from the purl base domain.
    global $base_url;
    // Checks that this site is being created on sitewide domain.
    $purl_base_domain = variable_get('purl_base_domain', '');
    // If the domain is NOT the purl base domain, alerts user and denies access.
    if ($base_url != $purl_base_domain) {
      drupal_set_message(t('You may not register new sites on custom domains.'), 'warning');

      return FALSE;
    }
  }

  // Next, checks this user's permissions.
  // Finds if user has permission to create at least 1 group node type.
  $group_bundles = og_get_all_group_bundle();
  $group_create_access = FALSE;
  foreach ( $group_bundles['node'] as $type => $label ) {
    if (user_access('create ' . $type . ' content')) {
      $group_create_access = TRUE;
      break;
    }
  }

  // Finds if user has permission to create vsites on behalf of others.
  $vicarious_access = (bool) user_access('create vsite content on behalf');

  // Denies access if user has no permission to create vsites.
  if (!$vicarious_access && !$group_create_access) {
    // Sets an error message if the user is accessing the site register form.
    if ($path_site_register) {
      // Clear message queue.
      drupal_get_messages();
      global $base_url;
      // @todo remove duplicate message
      // @see _os_pinserver_auth_existing_vsite_redirect()
      drupal_set_message(t('You do not have permission to create new OpenScholar sites. !link', array(
        '!link' => l(t('Return home.'), $base_url)
      )), 'error');
    }

    return FALSE;
  }

  // Last, checks if this user has exceeded the limit of sites per user.
  // Anonymous users have no "per-user" limit.
  global $user;
  if (user_is_anonymous() || $user->uid == 1) {
    return TRUE;
  }
  if (empty($vsites)) {
    ctools_include('vsite', 'vsite');
    $vsites = vsite_get_vsite_by_owner($user->uid);
  }

  // Checks if user is over limit. If so, they may only create sites on behalf.
  $vsites_per_user = variable_get('os_vsites_per_user', VSITE_PER_USER_DEFAULT);
  // Casts to int in order to compare without false positive.
  $user_over_limit = (bool) (count($vsites) >= (int) $vsites_per_user);
  // If this user is over the limit and is not creating on behalf...
  if ($user_over_limit && !$vicarious_access) {
    // Sets an error message if the user is accessing the site register form.
    if ($path_site_register) {
      // Clear message queue.
      drupal_get_messages();
      drupal_set_message(t('You have already created the maximum of %num OpenScholar !sites. !link', array(
        '%num' => count($vsites),
        '!sites' => count($vsites) > 1 ? 'sites' : 'site',
        '!link' => l(t('Go to your site' . (count($vsites) > 1 ? 's.' : '.')), count($vsites) > 1 ? 'user' : $vsites[0]->get_absolute_url())
      )), 'error');
    }

    return FALSE;
  }

  return TRUE;
}

/**
 * Returns TRUE only if current user may create a vsite.
 *
 * @param array $vsites
 *   Optional. Expects array like output of vsite_get_vsite_by_owner()
 *
 * @return bool
 *   Returns TRUE only if current user may create a vsite. Takes into account
 *   all group bundles, whether user can create vsites on behalf, and whether
 *   the user exceeds the sitewide vsite-per-user limit.
 */
function _vsite_user_access_create_vsite($vsites = FALSE){
  if (! $vsites) {
    global $user;
    $vsites = vsite_get_vsite_by_owner($user->uid);
  }

  $group_bundles = og_get_all_group_bundle();
  $user_access_create_vsite = FALSE;
  foreach ( $group_bundles['node'] as $type => $label ) {
    if (user_access('create ' . $type . ' content')) {
      $user_access_create_vsite = TRUE;
      break;
    }
  }

  // Returns FALSE if user does not have permission to create vsites at all.
  if (! user_access('create vsite content on behalf') && ! $user_access_create_vsite) {
    return FALSE;
  }

  // Returns if user may create on behalf, if they exceed the limit themselves.
  $user_owns_vsites = count($vsites);
  if ($user_owns_vsites) {
    $vsite_limit = variable_get('os_vsites_per_user', 1);
    $user_exceeds_limit = ( bool ) (count($vsites) >= $vsite_limit);
    if ($user_exceeds_limit) {
      return user_access('create vsite content on behalf');
    }
  }

  // Returns TRUE if user is not the author of any vsite.
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function vsite_permission(){
  return array(
    'create vsite content on behalf' => array(
      'title' => 'create vsite on behalf',
      'description' => t('Create vsite content on behalf of other users')
    ),
    'create subsites' => array(
      'title' => t('Create Subsites'),
      'description' => t('Create sites that belong to another site.')
    )
  );
}

/**
 *
 * Implements hook_admin_paths_alter().
 *
 * Any path in spaces is immediately disqualified from being in an overlay
 * because none
 * of them start with a wildcard.
 * They expect something like node/5/edit, when they get
 * site01/node/5/edit and fail.
 * This is rectified by putting a wildcard at the beginning to catch the
 * space modifier.
 */
function vsite_admin_paths_alter(&$paths){
  $new_paths = array();
  foreach ( $paths as $p => $b ) {
    if (strpos($p, '*/') !== 0) {
      $new_paths['*/' . $p] = TRUE;
    }
  }
  $paths = array_merge($paths, $new_paths);
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function vsite_vsite_og_node_type_info(){
  return array(
    'personal' => 'group',
    'project' => 'group',
    'department' => 'group'
  );
}

/**
 * Returns whether bundle is a group or is group content.
 *
 *  @param $bundle
 *    The node type bundle.
 *
 *  @return
 *    group/group content. If $bundle is empty, all the node types info will be
 *    returned.
 */
function vsite_get_type_from_bundle($bundle = NULL){
  $info = module_invoke_all('vsite_og_node_type_info');

  if (empty($bundle)) {
    return $info;
  }

  return isset($info[$bundle]) ? $info[$bundle] : FALSE;
}

/**
 * Implements hook_field_attach_create_bundle().
 *
 * When creating a new node bundle check if the bundle is defined as a group or
 * group content and attach the right fields.
 *
 * @see hook_vsite_og_node_type_info().
 */
function vsite_field_attach_create_bundle($entity_type, $bundle){
  switch ($entity_type) {
    case 'file' :
      // Every file is group content.
      vsite_attach_fields_to_group_content('file', $bundle);
      break;

    case 'node' :
      if (! $type = vsite_get_type_from_bundle($bundle)) {
        return;
      }

      if ($type == 'group') {
        vsite_attach_fields_to_group($bundle);
      }
      else {
        // Group content.
        vsite_attach_fields_to_group_content('node', $bundle);
      }

      if(in_array($bundle, variable_get('subsite_bundles',array('personal','project')))){
        //Subsites
        vsite_attach_fields_to_subsite($bundle);
      }
      break;
  }
}

/**
 * Adds group content fields to bundle.
 *
 * @param $entity_type
 *   The entity type of the bundle we want to attach the field to
 *
 * @param $bundle
 *   The bundle to attach the fields to.
 */
function vsite_attach_fields_to_group_content($entity_type, $bundle){
  $og_field = og_fields_info(OG_AUDIENCE_FIELD);
  $og_field['instance']['display'] = array(
    'default' => array(
      'type' => 'hidden'
    ),
    'teaser' => array(
      'type' => 'hidden'
    )
  );
  // Enable Entity reference prepopulate.
  $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
    'status' => TRUE,
    'action' => 'hide',
    'fallback' => 'hide',
    'skip_perm' => FALSE,
    'og_context' => TRUE,
    'action_on_edit' => TRUE
  );
  og_create_field(OG_AUDIENCE_FIELD, $entity_type, $bundle, $og_field);
}

/**
 * Adds group fields to bundle.
 *
 * @param $bundle
 *   The node-type to attach the fields to.
 */
function vsite_attach_fields_to_group($bundle){
  og_create_field(OG_GROUP_FIELD, 'node', $bundle);
  og_create_field(VSITE_ACCESS_FIELD, 'node', $bundle);

  if (! field_info_field('field_site_address')) {
    // field_site_address.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_address',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format'
          ),
          'table' => 'filter_format'
        )
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format'
        )
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255'
      ),
      'translatable' => '0',
      'type' => 'text'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_site_address', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 3
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_address',
      'label' => 'Site Address',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '30'
        ),
        'type' => 'text_textfield',
        'weight' => '32'
      )
    );
    field_create_instance($instance);
  }

  if (! field_info_field('field_site_description')) {
    // field_site_description.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_site_description',
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format'
          ),
          'table' => 'filter_format'
        )
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format'
        )
      ),
      'module' => 'text',
      'settings' => array(
        'max_length' => '255'
      ),
      'translatable' => '0',
      'type' => 'text'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_site_description', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 2
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_site_description',
      'label' => 'Site Description',
      'required' => FALSE,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'module' => 'text',
        'settings' => array(
          'size' => 60
        ),
        'type' => 'text_textfield',
        'weight' => '31'
      )
    );
    field_create_instance($instance);
  }

  if (! field_info_field('field_group_path')) {
    // field_group_path.
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_group_path',
      'foreign keys' => array(),
      'indexes' => array(),
      'locked' => '0',
      'module' => 'link',
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'rel' => '',
          'target' => 'default'
        ),
        'display' => array(
          'url_cutoff' => 80
        ),
        'enable_tokens' => 1,
        'title' => 'optional',
        'title_maxlength' => 128,
        'title_value' => '',
        'url' => 0
      ),
      'translatable' => '0',
      'type' => 'link_field'
    );
    $field = field_create_field($field);
  }

  if (! field_info_instance('node', 'field_group_path', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'default_value_function' => 'vsite_group_default_homepage_value',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => '5'
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_group_path',
      'label' => 'Group Homepage Path',
      'required' => 0,
      'settings' => array(
        'attributes' => array(
          'class' => '',
          'configurable_title' => 0,
          'rel' => '',
          'target' => 'default',
          'title' => ''
        ),
        'display' => array(
          'url_cutoff' => '80'
        ),
        'enable_tokens' => 1,
        'rel_remove' => 'default',
        'title' => 'none',
        'title_maxlength' => '128',
        'title_value' => '',
        'url' => 0,
        'user_register_form' => FALSE,
        'validate_url' => 0
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'link',
        'settings' => array(),
        'type' => 'link_field',
        'weight' => '2'
      )
    );
    field_create_instance($instance);
  }
  // Ensures that "field_organization" field is created.
  if (!field_info_field('field_organization')) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_organization',
      'foreign keys' => array(
        'tid' => array(
          'columns' => array(
            'tid' => 'tid',
          ),
          'table' => 'taxonomy_term_data',
        ),
      ),
      'indexes' => array(
        'tid' => array(
          0 => 'tid',
        ),
      ),
      'locked' => '0',
      'module' => 'taxonomy',
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'organization',
            'parent' => '0',
          ),
        ),
      ),
      'translatable' => '0',
      'type' => 'taxonomy_term_reference',
    );
    $field = field_create_field($field);
  }
  // Ensures that "field_organization" field instance is created.
  if (!field_info_instance('node', 'field_organization', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
          'weight' => 3,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_organization',
      'label' => 'Organization',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => '-1',
      ),
    );
    field_create_instance($instance);
  }
}

function vsite_attach_fields_to_subsite($bundle){

  if (! field_info_field('field_group_parent')) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_group_parent',
      'foreign keys' => array(
        'node' => array(
          'columns' => array(
            'target_id' => 'nid'
          ),
          'table' => 'node'
        )
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id'
        )
      ),
      'locked' => '0',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0
            )
          ),
          'sort' => array(
            'type' => 'none'
          ),
          'target_bundles' => array(
            'department' => 'department'
          )
        ),
        'target_type' => 'node'
      ),
      'translatable' => '0',
      'type' => 'entityreference'
    );
    field_create_field($field);
  }
  if (! field_info_instance('node', 'field_group_parent', $bundle)) {
    $instance = array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'default_value_function' => '',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'entityreference',
          'settings' => array(
            'link' => FALSE
          ),
          'type' => 'entityreference_label',
          'weight' => 6
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0
        )
      ),
      'entity_type' => 'node',
      'field_name' => 'field_group_parent',
      'label' => 'group_parent',
      'required' => 0,
      'settings' => array(
        'behaviors' => array(
          'prepopulate' => array(
            'status' => 0
          )
        ),
        'user_register_form' => FALSE
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => '34'
      )
    );
    field_create_instance($instance);
  }
}

/**
 * Prevents l() from initalizing the theme.
 *
 * This is used during hook_custom_theme(), so that we can get the space
 * earlier.
 *
 * Following a cache clear, the spaces presets need rebuilding. At some
 * point in this process, l() is called to put a link in the description
 * of a field in image. If l() tries to theme the link it creates,
 * drupal_initialize_theme is run, defeating the purpose of hook_custom_theme.
 *
 * This function prevents l() from initalizing the theme by setting theme_link
 * to false, running purl_init, and then restoring theme_link to its original
 * value.
 *
 * This fixes the theme problem after a cache clear. May have other unforseen
 * consequences.
 *
 * @see purl_init()
 */
function _vsite_purl_init(){
  // hack alert!
  global $conf;
  $theme_link = isset($conf['theme_link']) ? $conf['theme_link'] : NULL;
  $conf['theme_link'] = FALSE;

  purl_init();

  if (isset($theme_link)) {
    $conf['theme_link'] = $theme_link;
  }
  else {
    unset($conf['theme_link']);
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Remove the "Groups" link from the users 'edit' form.
 */
function vsite_menu_alter(&$items){
  $items['user/%user/edit/groups']['access callback'] = FALSE;
}

/**
 * Returns an array of all sites a user owns.
 */
function vsite_load_user_sites($user_id) {
  drupal_add_css(drupal_get_path('module', 'vsite') . '/css/vsite.css');

  $sites_array = array();
  // Grab their sites.
  $vsites_owner = vsite_get_vsite_by_owner($user_id);
  // Create each site as a link.
  foreach ($vsites_owner as $site ) {
    $node = node_load($site->group->nid);
    $items = array();
    $items[] = l($node->title, $site->get_absolute_url());
    if (node_access('delete', $node)) {
      $items[] = array(
        'data' => l(t('Delete site'), $site->get_absolute_url('node/' . $node->nid . '/delete')),
        'class' => 'delete-link',
      );
    }
    // Prepare them for theme_list_item.
    $sites_array[] = theme('item_list', array('items' => $items, 'attributes' => array('class' => array('inline'))));
  }

  return $sites_array;
}

/**
 * Returns an array of all sites the user is a member of of.
 */
function vsite_load_user_membership($user_id){
  $member_sites = array();
  $member_array = array();

  $vsites_member = vsite_get_user_vsites($user_id);
  // This function is returning 'all' sites, both member and admin sites.
  // Loop through and create links for the sites, but also check if they're the owner
  // or not, ignore them if they are.
  foreach ( $vsites_member as $m_site ) {
    // Check against the uid of the site
    if ($user_id != $m_site->group->uid) {
      $member_sites = array(
        '#title' => $m_site->group->title,
        '#type' => 'link',
        '#href' => $m_site->get_absolute_url()
      );
      // Prepare them for theme_list_item.
      $member_array[] = array(
        'data' => drupal_render($member_sites)
      );
    }
  }

  return $member_array;
}

/**
 * Implements hook_user_view_alter().
 * Altering the user view to remove history, groups and other groups
 * also altering to add in "My Websites" for all sites the user belongs to.
 */
function vsite_user_view_alter(&$build){
  global $user;

  // Removal section.
  // Remove the "history" and "member for" info if it's there.
  if (isset($build['summary'])) {
    unset($build['summary']);
  }
  // Remove the og_user_group_ref.
  if (isset($build['og_user_group_ref'])) {
    $build['og_user_group_ref']['#access'] = FALSE;
  }
  // Remove the og_other_user_group_ref.
  if (isset($build['og_other_user_group_ref'])) {
    $build['og_other_user_group_ref']['#access'] = FALSE;
  }
  // Remove the og_user_node.
  if (isset($build['og_user_node'])) {
    $build['og_user_node']['#access'] = FALSE;
  }

  // Reorganize the name display.
  // Remove firstname/lastname display and group it into one line.
  if(isset($build['field_first_name'])) {
    $first_name = $build['field_first_name']['#items'][0]['value'];
    // Remove display.
    $build['field_first_name']['#access'] = FALSE;
  }
  if(isset($build['field_last_name'])) {
    $last_name = $build['field_last_name']['#items'][0]['value'];
    // Remove the display.
    $build['field_last_name']['#access'] = FALSE;
  }

  // If both first and last name are set, change the page title to be their full name.
  if(isset($build['field_first_name']) && isset($build['field_last_name'])) {
    $title = $first_name . ' ' . $last_name;
    drupal_set_title($title);
  }


  // Additions section.
  // Add in an "Add website" link if user has permissions to create vsites.
  // Make sure they're logged in and it's their user page they're viewing.
  $own_user_page = (bool) (isset($build['#account']) && ($user->uid == $build['#account']->uid));
  if (vsite_vsite_exists_access() && user_is_logged_in() && $own_user_page) {
    $purl_base_domain = variable_get('purl_base_domain', '');
    $title = t('Add a new site');
    $description = t('Create an additional site');
    $parent = NULL;
    $options = array(
      'attributes' => array('class' => array('user-add-website')),
    );
    $create_new_link = _vsite_add_site_link($title, $description, $parent, $options);
    $build['add_new_site'] = array(
      '#title' => '',
      '#prefix' => '<div class="user-add-site-block">',
      '#suffix' => '</div>',
      '#type' => 'user_profile_item',
      '#markup' => theme_link($create_new_link),
      '#weight' => '10',
    );
  }

  // Load data of their sites.
  $owner_sites = vsite_load_user_sites($build['#account']->uid);
  $member_sites = vsite_load_user_membership($build['#account']->uid);

  $vsites_list = '';
  // Websites item build.
  if (! empty($owner_sites) || ! empty($member_sites)) {
    // Pass the items to theme_item_list.
    if (! empty($owner_sites)) {
      // In d6 a plural or singular was used in order to apply the correct CSS selector to the list
      // retain that functionality.
      if (count($owner_sites) > 1) {
        $css_selector = array(
          'class' => 'plural'
        );
        $website_title = t('My websites:');
      }
      else {
        $css_selector = array(
          'class' => 'single'
        );
        $website_title = t('My website:');
      }
      $vsites_list .= theme_item_list(array(
        'items' => $owner_sites,
        'title' => $website_title,
        'type' => 'ul',
        'attributes' => $css_selector
      ));
    }
    if (! empty($member_sites)) {
      if (count($member_sites) > 1) {
        $css_selector = array(
          'class' => 'plural'
        );
        $membership_title = t('Websites I am a member of:');
      }
      else {
        $css_selector = array(
          'class' => 'single'
        );
        $membership_title = t('Website I am a member of:');
      }
      // end if
      $vsites_list .= theme('item_list', array(
        'items' => $member_sites,
        'title' => $membership_title,
        'type' => 'ul',
        'attributes' => $css_selector
      ));
    }

    // Set a new field.
    $build['web_sites'] = array(
      '#title' => '',
      '#prefix' => '<div class="user-websites-block">',
      '#suffix' => '</div>',
      '#type' => 'user_profile_item',
      '#markup' => $vsites_list,
      '#weight' => '10',
    );
  }
}

/**
 * Implements hook_preprocess_page.
 * Change the title of the "edit" tab on the user page to "Edit Account".
 */
function vsite_preprocess_page(&$vars) {
  global $user;
  $item = menu_get_item();

  // Only make the change to the local menu tab in the /user page.
  // Add in the "Add full name" link only on the /user page.
  if(isset($item) && (strpos($item['path'], 'user') === 0)) {
    if (isset($vars['tabs']['#primary']) && is_array($vars['tabs']['#primary'])) {
      foreach ($vars['tabs']['#primary'] as $delta => $tab) {
        if (in_array($tab['#link']['title'], array("Edit"))) {
          $vars['tabs']['#primary'][$delta]['#link']['title'] = "Edit Account";
        }
      }
    }

    // Retrieve the user of the /user page we're viewing.
    if(isset($item['map'][1]) && is_object($item['map'][1])) {
      $view_user = $item['map'][1];
    }

    // Make sure the user is logged in and they are viewing their own /user page.
    if(user_is_logged_in() && isset($view_user->uid) && ($user->uid == $view_user->uid)) {
      // Get the first and last name.
      $first_name = field_get_items('user',$view_user,'field_first_name');
      $last_name = field_get_items('user',$view_user,'field_last_name');

      // No need for the Add full name link if they already have a full name.
      if(isset($first_name) && isset($last_name) && is_array($first_name) && is_array($last_name)) {
        return;
      }

      // Don't show the link on the user/%/edit page either, redundant.
      if(strpos($item['path'], 'edit') !== false) {
        return;
      }

      // Put the "Add Full Name" link in a container.
      $vars['title_suffix']['add_full'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'add-full-name-wrapper',
          ),
        ),
      );
      $vars['title_suffix']['add_full']['add_full_name'] = array(
        '#theme' => 'link',
        '#text' => t('Add full name'),
        '#path' => 'user/'.$user->uid.'/edit',
        '#options' => array(
          'attributes' => array(
            'class' => array('user-add-name'),
          ),
          'fragment' => 'user_first_name',
          'html' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Alters system emails to users based on certain actions.
 */
function vsite_mail_alter(&$message){
  global $base_url;

  switch ($message['id']) {
    // Account created during "Create this OS Site on behalf of another user".
    case 'user_register_no_approval_required' :
      // Gets the user id we just created.
      $uid = $message['params']['account']->uid;
      // Loads the user.
      $user = user_load($uid);
      // Grab their first name, if it doesnt exist, use their user name.
      if (! empty($user->field_first_name['und'][0]['value'])) {
        $first_name = $user->field_first_name['und'][0]['value'];
      }
      else {
        $first_name = $user->name;
      }
      // Alter the subject.
      $message['subject'] = t('An OpenScholar account has been created for you at !site_name', array(
        '!site_name' => variable_get('site_name', 'OpenScholar')
      ));
      $replacements = array(
        '!site' => variable_get('site_name', 'OpenScholar'),
        '!login_url' => user_pass_reset_url($user),
        '!mailto' => $user->mail,
        '!firstname' => $first_name,
        '!username' => $user->name,
        '!futurelogin' => $base_url . '/user/'
      );

      // Alter the body message.
      $message['body'][0] = t("Dear !firstname,\n\nYour account at the !site website has been created for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This login can be used only once.)\n\nYour username is: !username \n\nAfter setting your password with the included link, you will be able to log in at !futurelogin in the future.\n\nSincerely,\nThe !site Team", $replacements);
      break;

    // Account created by admin in the admin/people panel.
    case 'user_register_admin_created' :
      // Get the user id we just created.
      $uid = $message['params']['account']->uid;
      // Load the user data.
      $user = user_load($uid);
      // Grab their first name, if it doesnt exist, use their user name.
      if (! empty($user->field_first_name['und'][0]['value'])) {
        $first_name = $user->field_first_name['und'][0]['value'];
      }
      else {
        $first_name = $user->name;
      }
      // Alter the email subject.
      $message['subject'] = t('An OpenScholar account has been created for you at !site_name', array(
        '!site_name' => variable_get('site_name', 'OpenScholar')
      ));
      $replacements = array(
        '!site' => variable_get('site_name', 'OpenScholar'),
        '!login_url' => user_pass_reset_url($user),
        '!mailto' => $user->mail,
        '!firstname' => $first_name,
        '!username' => $user->name,
        '!futurelogin' => $base_url . '/user/'
      );
      // Alter the message body.
      $message['body'][0] = t("Dear !firstname,\n\nA site owner at the !site website has created an account for you. You may now log in by either clicking through on the following link or pasting it into your browser:\n\n !login_url\n\n(Note: This login can be used only once.)\n\nYour username is: !username \n\nAfter setting your password with the included link, you will be able to log in at !futurelogin in the future.\n\nSincerely,\nThe !site Team", $replacements);
      break;
  }
}

/**
 * Implements hook_node_presave().
 */
function vsite_node_presave($node) {
  include_once (drupal_get_path('module', 'vsite') . '/includes/path.inc');
  _vsite_alter_node_path_settings($node);
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function vsite_taxonomy_term_presave($term) {
  include_once (drupal_get_path('module', 'vsite') . '/includes/path.inc');
  _vsite_alter_term_path_settings($term);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for user_profile_form.
 */
function vsite_form_user_profile_form_alter(&$form, &$form_state, &$form_id){
  if (! array_key_exists('redirect_from_reset', $form)) {
    $form['redirect_from_reset'] = array(
      '#type' => 'hidden',
      '#default_value' => FALSE
    );
  }

  if ($_SERVER['REDIRECT_STATUS'] == '200' && strstr($_SERVER['HTTP_REFERER'], 'user/reset') !== FALSE) {
    $form['redirect_from_reset']['#value'] = TRUE;
  }
  // Are we coming from the special login link?


  $form['#submit'][] = 'vsite_redirect_reset_submit';

  // Remove the form element that the 'contact' module hooks in.
  if (isset($form['contact'])) {
    $form['contact']['#access'] = FALSE;
  }

  // Change the page title to be firstname lastname if entered.
  if(isset($form['#user']) && is_object($form['#user'])) {
    // Load the user.
    $user = $form['#user'];
    // Get the first and last name.
    $first_name = field_get_items('user',$user,'field_first_name');
    $last_name = field_get_items('user',$user,'field_last_name');
    if(isset($first_name) && isset($last_name) && is_array($first_name) && is_array($last_name)) {
      $print_name = $first_name[0]['value'] . ' ' . $last_name[0]['value'];
      drupal_set_title($print_name);
    }
  }

  // Add an anchor to the first name field.
  if(isset($form['field_first_name'])) {
    $form['field_first_name']['#prefix'] = '<a name="user_first_name" class="field_first_name_anchor">';
    $form['field_first_name']['#suffix'] = '</a>';
  }
}

/**
 * Implements hook_node_view() for user_profile_form.
 */
function vsite_node_view($node, $view_mode){
  //If we are viewing a group node got to the groups homepage
  if ($view_mode == 'full' && node_is_page($node) && og_is_group('node', $node)) {
    drupal_goto("<front>");
  }
}

/**
 * Implements hook_node_insert()
 */
function vsite_node_insert($node){
  if(in_array($node->type, variable_get('subsite_bundles',array('personal','project')))){
    ctools_include('subsite','vsite');
    vsite_get_subsites(FALSE,TRUE);
  }

  if (og_is_group_type('node', $node->type)) {
    module_load_include('inc', 'vsite', 'includes/user');
    vsite_user_add($node->uid ,$node->nid);
    vsite_role_grant($node->uid, 'vsite admin', $node->nid);
  }
}

/**
 * Implements hook_node_update()
 */
function vsite_node_update($node){
  if(in_array($node->type, variable_get('subsite_bundles',array('personal','project')))){
    ctools_include('subsite','vsite');
    vsite_get_subsites(FALSE,TRUE);
  }
}

/**
 * Submit callback for user_profile_form.
 *
 * Checks the passed reset value, if it is present we will redirect.
 */
function vsite_redirect_reset_submit($form, &$form_state){
  if (is_array($form_state['values']) && array_key_exists('redirect_from_reset', $form_state['values']) && $form_state['values']['redirect_from_reset']) {
    $vsites = vsite_get_vsite_by_owner($form['#user']->uid);
    if (count($vsites) == 1 && is_object($vsites[0])) {
      drupal_goto($vsites[0]->get_absolute_url());
    }
    else {
      drupal_goto('user/' . $form['#user']->uid);
    }
  }
}

/**
 * Implements hook_menu().
 */
function vsite_menu(){
  $items = array();

  $items['contact_owner'] = array(
    'title' => 'Contact',
    'page callback' => 'vsite_site_contact',
    'page arguments' => array(
      1
    ),
    'type' => MENU_CALLBACK,
    'access callback' => 'vsite_site_contact_access'
  );

  // Node autocomplete callback that filters only nodes in the current space.
  $items['vsite/autocomplete/node'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Vsite Autocomplete Node',
    'page callback' => 'vsite_node_autocomplete_callback',
    'file' => 'nodeautocomplete.inc',
    'access arguments' => array(
      'access content'
    ),
    'file path' => drupal_get_path('module', 'vsite') . '/includes'
  );

  // User autocomplete callback that allows for searching of name/email/login.
  $items['vsite/autocomplete/user'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Vsite Autocomplete User',
    'page callback' => 'vsite_user_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access user profiles'),
  );

  return $items;
}

/**
 * Page callback; Contact form that contacts the site owner.
 *
 * @return contact_page
 */
function vsite_site_contact(){
  if (! ($space = spaces_get_space()) || ! ($user = user_load($space->group->uid))) {
    return MENU_ACCESS_DENIED;
  }
  $space = spaces_get_space();
  if (! empty($space)) {
    // Get the vsite_users_contact_form_anonymous varible
    $contact_anon = $space->controllers->variable->get('vsite_users_contact_form_anonymous', 'space');
  }
  else {
    $contact_anon = variable_get('vsite_users_contact_form_anonymous', '1');
  }
  if (empty($contact_anon) && ! user_is_logged_in()) {
    $output = t('You need to be logged in in order to send mail to this user.');
  }
  elseif (! flood_is_allowed('contact', variable_get('contact_hourly_threshold', 3))) {
    $output = t('You cannot contact more than %number users per hour. Please try again later.', array(
      '%number' => variable_get('contact_hourly_threshold', 3)
    ));
  }
  else {
    drupal_set_title("Contact Site Owner");
    $output = drupal_get_form('vsite_contact_mail_owner', $user);
  }

  return $output;
}

/**
 * Builds and returns the contact_owner form.
 */
function vsite_contact_mail_owner($form, &$form_state, $recipient){
  global $user;
  $email_user = user_load($recipient->uid);

  // Create the form.
  if ($user->uid != 0) {
    $form['#token'] = $user->name . $user->mail;
  }

  $form['recipient'] = array(
    '#type' => 'value',
    '#value' => $recipient
  );
  if ($user->uid != 0 && $user->mail) {
    $form['from'] = array(
      '#type' => 'item',
      '#title' => t('From'),
      '#markup' => theme('username', array(
        'account' => $user
      )) . ' &lt;' . check_plain($user->mail) . '&gt;'
    );
  }
  else {
    $form['name'] = array(
      '#type' => 'item',
      '#title' => t('From'),
      '#markup' => t('Anonymous')
    );

    $form['sender_firstname'] = array(
      '#type' => 'textfield',
      '#title' => t('First name'),
      '#required' => TRUE
    );

    $form['sender_lastname'] = array(
      '#type' => 'textfield',
      '#title' => t('Last name'),
      '#required' => TRUE
    );

    $form['from'] = array(
      '#type' => 'textfield',
      '#title' => t('E-Mail Address'),
      '#required' => TRUE
    );
  }

  // Check for a first name.
  $user_first_name = field_get_items('user', $email_user, 'field_first_name');
  if (isset($user_first_name[0]['safe_value'])) {
    $first_name = $user_first_name[0]['safe_value'];
    // Get the last name.
    $user_last_name = field_get_items('user', $email_user, 'field_last_name');
    if (isset($user_last_name[0]['safe_value'])) {
      $last_name = $user_last_name[0]['safe_value'];
    }
    else {
      $last_name = '';
    }
    $recipient->name = $first_name . " " . $last_name;
  }
  elseif (($space = spaces_get_space()) && strlen($space->group->title)) {
    $recipient->name = $space->group->title;
  }

  if ($user->uid === 0) {
    $recipient_name = check_plain($recipient->name);
  }
  else {
    $recipient_name = theme('username', array(
      'account' => $recipient
    ));
  }

  $form['to'] = array(
    '#type' => 'item',
    '#title' => t('To'),
    '#markup' => $recipient_name
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 50,
    '#required' => TRUE
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 15,
    '#required' => TRUE
  );
  $form['copy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send yourself a copy.')
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send e-mail'),
    '#weight' => 100
  );

  return $form;
}

/**
 * Processes the personal contact page form submission.
 */
function vsite_contact_mail_owner_submit($form, &$form_state){
  global $user, $language;

  $account = $form_state['values']['recipient'];
  $space = spaces_get_space();

  // Send from the current user to the requested user.
  $to = $account->mail;
  if ($user->uid != 0) {
    $from = $user->mail;
    // Needed for the watchdog entry.
    $flood_name = $user->name;
  }
  else {
    if (! strlen($form_state['values']['from']) || ! preg_match('/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,7})+$/', $form_state['values']['from'])) {
      drupal_set_message(t('You must provide a valid e-mail address.'));
      return;
    }
    // Needed for the watchdog entry.
    $flood_name = 'anonymous';
    $from = $form_state['values']['from'];
  }

  // Save both users and all form values for email composition.
  $values = $form_state['values'];
  $values['account'] = $account;
  $values['user'] = $user;
  $values['vsite'] = $space;

  // Send the e-mail in the requested user language.
  drupal_mail('vsite', 'user_mail', $to, user_preferred_language($account), $values, $from);

  // Send a copy if requested, using current page language.
  if ($form_state['values']['copy']) {
    drupal_mail('vsite', 'user_copy', $from, $language, $values, $from);
  }

  flood_register_event('contact');
  watchdog('mail', '%name-from sent %name-to an e-mail.', array(
    '%name-from' => $flood_name,
    '%name-to' => $account->name
  ));
  drupal_set_message(t('The message has been sent.'));

  // Back to the home page
  $form_state['redirect'] = "home";
}

/**
 * Only allows access if user is authenticated and space is set.
 *
 * @return contact_page
 */
function vsite_site_contact_access(){
  if (! ($space = spaces_get_space()) || ! ($user = user_load($space->group->uid))) {
    return FALSE;
  }

  return TRUE;
  /*
  $contact_anon = $vsite->controllers->variable->get('vsite_users_contact_anonymous');
  // there was a contact form var here, but I don't know where it's set from
  return ($contact_anon !== 0 || user_is_logged_in());
  */
}

/**
 * Implements hook_mail().
 */
function vsite_mail($key, &$message, $params){
  $language = $message['language'];
  switch ($key) {
    case 'user_mail' :
    case 'user_copy' :
      $user = $params['user'];
      $account = $params['account'];
      $vsite = $params['vsite'];
      $message['subject'] = $params['subject'] . ' [via ' . variable_get('site_name', 'Drupal') . ']';
      $message['body'][] = $params['message'];
      $message['body'][] = "\n\n---------------";

      $message['body'][] = t("This message was sent to you from \"!site\" on behalf of !name through your website contact form (!form-url).", array(
        '!name' => isset($user->name) ? $user->name : $params['sender_firstname'] . ' ' . $params['sender_lastname'] . ' (' . $message['from'] . ')',
        '!form-url' => url($_GET['q'], array(
          'absolute' => TRUE,
          'language' => $language
        )),
        '!site' => variable_get('site_name', 'Drupal')
      ));
      $message['body'][] = t("If you don't want to receive such e-mails, you can change your settings at !url.", array(
        '!url' => $vsite->get_absolute_url("cp/settings")
      ));
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * Altering the node_admin_content form to remove the
 * Promote/demote content to frontpage option in admin/content on multisite installs.
 */
function vsite_form_node_admin_content_alter(&$form, &$form_state){
  if (isset($form['admin']['options']['operation']['#options']['promote'])) {
    unset($form['admin']['options']['operation']['#options']['promote']);
  }
  if (isset($form['admin']['options']['operation']['#options']['demote'])) {
    unset($form['admin']['options']['operation']['#options']['demote']);
  }
}

/**
 * Implements hook_mollom_form_list().
 */
function vsite_mollom_form_list(){
  if (module_exists('mollom')) {
    $forms['vsite_contact_mail_owner'] = array(
      'title' => t('Contact Site Owner')
    );
    return $forms;
  }
}

/**
 * Implements hook_mollom_form_info().
 */
function vsite_mollom_form_info($form_id){
  if (module_exists('mollom')) {
    switch ($form_id) {
      case 'vsite_contact_mail_owner' :
        $form_info = array(
          'mode' => MOLLOM_MODE_CAPTCHA,
          'elements' => array(),
          'mapping' => array()
        );
        return $form_info;
        break;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 * Set the head_title to the vsite name rather than the site_name, if in a vsite.
 */
function vsite_preprocess_html(&$vars){
  $spaces = spaces_get_space();
  if (isset($spaces)) {
    $vsite_title = isset($spaces->group->title) ? $spaces->group->title : variable_get('site_name');

    // Check for the frontpage.
    if (drupal_is_front_page()) {
      $head_title = array(
        $vsite_title
      );
    }
    else {
      $head_title = array(
        strip_tags(drupal_get_title()),
        $vsite_title
      );
    }

    // Set the new page 'head' title.
    $vars['head_title'] = implode(' | ', $head_title);
  }
}

/**
 * Implements hook_preprocess_toolbar().
 * Add a link to create a subsite.
 */
function vsite_preprocess_toolbar(&$vars){
  if ($space = spaces_get_space()) {
    ctools_include('subsite', 'vsite');

    $title = t('Add subsite');
    $description = t('Add a subsite to the current site.');
    $parent = $space->group->nid;
    $link = _vsite_add_site_link($title, $description, $parent);
    if (vsite_subsite_access('create', $space)) {
      $vars['toolbar']['toolbar_right']['toolbar_subsite'] = array(
        '#theme' => 'links__toolbar_subsite',
        '#links' => array(
          'add_site' => $link,
        )
      );
    }
  }
}

/**
 * Submit callback for subsite configuration
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function vsite_os_settings_subsites_form_submit($form, &$form_state){

	variable_set('subsite_bundles',array_filter($form_state['values']['subsite_bundles']));
  variable_set('subsite_parents',array_filter($form_state['values']['subsite_parents']));

  foreach (array_filter($form_state['values']['subsite_bundles']) as $subsite_type){
    vsite_attach_fields_to_subsite($subsite_type);
  }
}

/**
 * Autocomplete function to allow users to now search for users based on name, email or login.
 * Used the function spaces_user_autocomplete as the skeleton for this function.
 */
function vsite_user_autocomplete($string = '') {
  $space = spaces_get_space();
  $matches = array();
  if ($string) {
    $query = db_select('users', 'u');
    // Left Join the field_data_field_first_name table.
    $query->leftJoin('field_data_field_first_name', 'fn', '(u.uid = fn.entity_id AND fn.entity_type = :param1)',array(':param1' => 'user'));
    // Left Join the field_data_field_last_name table.
    $query->leftJoin('field_data_field_last_name', 'ln', '(u.uid = ln.entity_id AND ln.entity_type = :param2)',array(':param2' => 'user'));
    $query->condition(
      db_or()
        ->condition('u.name', db_like($string) . '%', 'LIKE')
        ->condition('u.mail', db_like($string) . '%', 'LIKE')
        ->condition('fn.field_first_name_value', db_like($string) . '%', 'LIKE')
        ->condition('ln.field_last_name_value', db_like($string) . '%', 'LIKE')
    );
    $query->fields('u', array('name'));
    // CONCAT the display, if there is no last name entered, show the username/email only, if there is a last name, show first/last/email.
    $query->addExpression("IF(ln.field_last_name_value = '' OR ln.field_last_name_value IS NULL, CONCAT(u.name, ' (', u.mail , ') '), CONCAT(IFNULL(fn.field_first_name_value,''), ' ', IFNULL(ln.field_last_name_value,''), ' (',u.name,', ', u.mail , ') '))", 'myname');
    $query->range(0, 10);
    $query->addTag('user_autocomplete');

    $result = $query->execute();
    foreach ($result as $user) {
      $matches[$user->name] = check_plain($user->myname);
    }

    // Remove the admin from the list.
    $admin = db_query("SELECT name FROM {users} WHERE uid = :uid", array(':uid' => '1'))->fetchField();
    if(array_key_exists($admin, $matches)) {
      unset($matches[$admin]);
    }

    // Remove current group members.
    if(isset($space)) {
      $query = db_select("og_membership", "ogm");
      $query->join('users', 'u', 'u.uid = ogm.etid');
      $query->condition("ogm.gid", $space->group->nid, "=");
      $query->condition("entity_type","user","=");
      $query->fields("u", array("name"));
      $result = $query->execute()->fetchAll();
      if($result) {
        foreach($result as $username) {
          $group[$username->name] = $username->name;
        }
        // Remove the memebers.
        $matches = array_diff_key($matches, $group);
      }
    }
  }
  drupal_json_output($matches);
}

/**
 * Alter metadata for entity properties for use with entity module.
 *
 * Expose group entity properties to the entityAPI module.
 *
 * @see hook_entity_property_info()
 */
function vsite_entity_property_info_alter(&$info) {

  $group_types = array_keys(array_intersect(module_invoke_all('vsite_og_node_type_info'), array('group')));
  foreach ($group_types as $type) {
    if(!isset($info['node']['bundles'][$type]['properties'])){
      continue;
    }
    $properties = &$info['node']['bundles'][$type]['properties'];

    $properties['spaces_preset_og'] = array(
      'label' => t("Spaces Preset"),
      'description' => t("The preset for a vsite."),
      'type' => 'text',
      'getter callback' => 'entity_metadata_node_get_properties',
      'setter callback' => 'entity_property_verbatim_set',
    );
    $properties['purl'] = array(
      'label' => t("vsite PURL"),
      'description' => t("The purl for a vsite."),
      'type' => NULL,
      'getter callback' => 'entity_metadata_node_get_properties',
      'setter callback' => 'entity_property_verbatim_set',
    );
  }

  $info['user']['bundles']['user']['properties']['pass'] = array(
    'label' => t("Password"),
    'description' => t("The password for a user entity."),
    'type' => 'text',
    'getter callback' => 'entity_metadata_user_get_properties',
    'setter callback' => 'entity_property_verbatim_set',
  );

}

/**
 * Returns a render array for the add site button.
 *
 * Can be passed to theme_links() as a link item, or to theme_link as a link.
 * Because of this, title, path/href, and options are duplicated.
 */
function _vsite_add_site_link($title, $description, $parent = NULL, $options = array()) {
  $purl_base_domain = variable_get('purl_base_domain');
  $href = 'site/register';
  $build = array(
    'title' => $title,
    'text' => $title,
    'href' => $href,
    'path' => $href,
    'description' => $description,
    'attributes' => array(
      'data-tooltip' => $description,
    ),
    'absolute' => TRUE,
    'base_url' => $purl_base_domain,
    'options' => array(
      'absolute' => TRUE,
      'base_url' => $purl_base_domain,
      'attributes' => array(
        'data-tooltip' => $description,
      ),
    ),
  );

  if ($parent) {
    $build['query'] = array(
      'parent' => $parent,
    );
    $build['options']['query'] = array(
      'parent' => $parent,
    );
  }

  if (isset($options['attributes']['class'])) {
    $build['attributes']['class'] = $options['attributes']['class'];
    $build['options']['attributes']['class'] = $options['attributes']['class'];
  }

  return $build;
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function vsite_pathauto_alias_alter(&$alias, $context) {
  // Only continues if we are outside of a vsite.
  if ($vsite = vsite_get_vsite()) {
    return;
  }

  // Only continues if we have a valid group content and alias to modify.
  $node = $context['data']['node'];
  if (!isset($node->vsite_pathauto_alias_alter) || empty($node->vsite_pathauto_alias_alter)) {
    return;
  }
  if (og_is_group_type('node', $node->type)) {
    return;
  }
  if (empty($alias)) {
    return;
  }

  // Only continues if we can get a vsite group ID.
  $wrapper = entity_metadata_wrapper('node', $node);
  $gids = $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE));
  $gid = isset($gids[0]) ? $gids[0] : NULL;
  if ($gid === NULL) {
    return;
  }

  // Only continues if we can get a non-empty purl value from the vsite.
  // Note: We don't need to set $reset = TRUE here because it was already reset.
  // @see vsite_add_node()
  $vsite = vsite_get_vsite($gid);
  $purl = vsite_get_purl($vsite);

  // Only continues if we were able to find a purl value.
  if (empty($purl)) {
    return;
  }

  // Only continues if the purl isn't yet present as a prefix.
  $purl_present = (bool) (strpos($alias, "$purl/") === 0);
  if ($purl_present) {
    return;
  }

  // Prefixes the alias with the purl.
  // Note: This occurs BEFORE pathauto_alias_uniquify().
  $alias = "$purl/$alias";
}
