<?php

include_once 'os_reader.features.inc';

/**
 * Implements hook_menu().
 */
function os_reader_menu() {
  $items = array();

  $items['os-reader/copy-feed-to-news/%/%/%/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'os_reader_ajax_copy_feed_to_news',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'os_reader_ajax_copy_feed_to_news_access',
    'access arguments' => array(2, 3, 5),
  );

  $items['os-reader'] = array(
    'title' => 'Import news',
    'page callback' => 'os_reader_import_news',
    'access callback' => 'os_reader_import_news_access_callback',
  );

  return $items;
}

function os_reader_admin_paths() {
  return array(
    'os-reader' => TRUE,
    'os-reader/*' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function os_reader_theme() {
  $items = array();

  $items['os_reader'] = array(
    'variables' => array(
      'view' => '',
      'importers' => '',
      'add_new' => '',
    ),
    'template' => 'os-reader',
  );

  return $items;
}

/**
 * Access callback for the os reader news import.
 */
function os_reader_import_news_access_callback() {
  if ($vsite = vsite_get_vsite()) {
    return og_user_access('node', $vsite->id, 'create news content');
  }
  else {
    return user_access('create news content');
  }
}

/**
 * Page Callback; Display feed items which can be imported into vsite.
 */
function os_reader_import_news() {
  drupal_add_css(drupal_get_path('module', 'os_reader') . '/os_reader.css');
  drupal_add_js(drupal_get_path('module', 'os_reader') . '/os_reader.js');

  $item = menu_get_item();
  $feed_importer_nid = isset($item['map'][1]) ? $item['map'][1] : NULL;

  // Check if user is allowed to import feeds.
  if ($vsite = vsite_get_vsite()) {
    if (og_user_access('node', $vsite->id, 'create feed_importer content')) {
      $options = array('attributes' => array('class' => array('add-new')));
      $add_new = l(t('+ Add new'), 'node/add/feed-importer', $options);
    }
  }

  $variables = array(
    'importers' => os_reader_get_importers_list($feed_importer_nid),
    'view' => views_embed_view('os_reader_feeds', 'default', $feed_importer_nid),
    'add_new' => empty($add_new) ? '' : $add_new,
  );

  return theme('os_reader', $variables);
}

/**
 * Helper function for import news screen; Returns list of feed importer nodes.
 *
 * @param $feed_importer_nid
 *    Currently viewed importer, will get class 'active'.
 *
 * @return
 *    Themed item list of feed importers.
 */
function os_reader_get_importers_list($feed_importer_nid = NULL) {
  // Get all feed importer nodes.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'feed_importer')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute();

  if (empty($result['node'])) {
    // No feed importer nodes.
    return 'No feed importers found.';
  }
  $importers = node_load_multiple(array_keys($result['node']));

  // Create item list of feed importers.
  $items = array(
    array(
      'data' => l('All feeds', 'os-reader'),
      'class' => empty($feed_importer_nid) ? array('active') : array(),
    ),
  );
  foreach ($importers as $importer) {
    if ($feed_importer_nid == $importer->nid) {
      // Currently viewed importer, display as active text.
      $items[] = array(
        'data' => $importer->title,
        'class' => array('active'),
      );
    }
    else {
      // Display importer as link.
      $items[] = array(
        'data' => l($importer->title, 'os-reader/' . $importer->nid),
      );
    }
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Implements hook_os_add_new_links_alter().
 */
function os_reader_os_add_new_links_alter(&$links) {
  $menu = menu_get_item();

  $vsite = vsite_get_vsite();
  if ($menu['path'] == 'reader' && og_user_access('node', $vsite->id, 'create feed_importer content')) {
    $links['add_feed_importer'] = array(
      'title' => t('Add feed importer'),
      'href' => 'node/add/feed-importer',
    );
  }

  if ($menu['path'] == 'news' && os_reader_import_news_access_callback()) {
    $links['import-news'] = array(
      'title' => t('Import News'),
      'href' => 'os-reader',
    );
  }
}

/**
 * Access callback; Feed item copy.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $nid
 *  The vsite node ID.
 * @param $token
 *  Security token.
 *
 * @return bool
 *  Return true/false whether the user has access to copy the feed.
 */
function os_reader_ajax_copy_feed_to_news_access($feed_id, $nid, $token) {
  if (!drupal_valid_token($token, $feed_id . ':' . $nid)) {
    // Not a valid token.
    return;
  }
  if (!og_user_access('node', $nid, 'create news content')) {
    // User does not have access to create "News" in VSite.
    return;
  }

  if (!os_reader_feed_item_load($feed_id)) {
    // Not a valid feed item.
    return;
  }

  return TRUE;
}

/**
 * AJAX callback for bind feed item to node.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $vsite_id
 *  The vsite ID.
 * @param string $ajax
 */
function os_reader_ajax_copy_feed_to_news($feed_id, $vsite_nid, $ajax = 'nojs') {
  $feed = os_reader_feed_item_load($feed_id);
  $vsite = vsite_get_vsite($vsite_nid);
  $vsite_id = $vsite->id;
  $current_vsite = vsite_get_vsite();

  $news_node = os_reader_copy_feed_item_to_news($feed, $vsite);

  if ($ajax == 'ajax') {
    $message = empty($current_vsite) ? t('Feed item imported to @vsite', array('@vsite' => $vsite->og->title)) : t('Imported');
    $commands[] = ajax_command_html("#feed-{$feed_id}-{$vsite_id}", $message);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    drupal_set_message('Feed item added to @vsite', array('@vsite' => $vsite->title));
  }
}

/**
 * Implements hook_os_app_info().
 */
function os_reader_os_app_info() {
  $apps = array();

  $apps['os_reader'] = array(
    'path' => 'reader',
  	'nodetypes' => array(
  	  'feed',
    ),
    'views tabs' => array(
      'reader' => array('page'),
    ),
  );

  return $apps;
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_reader_vsite_og_node_type_info() {
  return array(
    'feed' => 'group content',
    'feed_importer' => 'group content',
  );
}

/**
 * Implements hook_entity_info().
 */
function os_reader_entity_info() {
  return array(
    'os_feed_item' => array(
      'label' => t('OS feed item'),
      'entity class' => 'Entity',
      'base table' => 'os_feed_item',
      'fieldable' => TRUE,
      'controller class' => 'EntityAPIController',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundles' => array(
        'feed_item' => array(
          'label' => '',
          'admin' => array(
            'path' => 'admin/config/content/os_feed/manage/os_feed',
            'real path' => 'admin/config/content/os_feed/manage/os_feed',
            'access arguments' => array('os_feed manage'),
          ),
        ),
      ),
      'views controller class' => 'OsReaderViewsController',
      'metadata controller class' => 'OsReaderMetadataController',
    ),
  );
}

/**
 * Create an OS feed item object.
 *
 * @param $values
 *  The initialized values of the OS feed item object.
 *
 * @return Entity
 *  The entity object of the OS feed item entry.
 */
function os_reader_feed_item_create($values = array()) {
  $values += array(
    'type' => 'feed_item',
    'created' => time(),
  );

  return entity_create('os_feed_item', $values);
}

/**
 * Load an OS feed item entry.
 *
 * @param $id
 *  The OS feed item identifier.
 *
 * @return Entity
 *  The OS feed item object.
 */
function os_reader_feed_item_load($id) {
  return entity_load_single('os_feed_item', $id);
}

/**
 * Load multiple OS feed item entries.
 *
 * @param $ids
 *  List of IDs to load.
 *
 * @return Entity
 *  List of OS feed item entries.
 */
function os_reader_feed_item_load_multiple($ids) {
  return entity_load('os_feed_item', $ids);
}

/**
 * Delete multiple imported entities.
 *
 * @param $ids
 *  The identifiers of the imported entities.
 */
function os_reader_feed_item_delete_multiple($ids) {
  entity_delete_multiple('os_feed_item', $ids);
}

/**
 * Implements hook_feeds_plugins().
 */
function os_reader_feeds_plugins() {
  $info = array();
  $info['OsFeedReaderFetcher'] = array(
    'name' => t('OS feed reader fetcher'),
    'description' => t('Fetch info from a out source.'),
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'OsFeedReaderFetcher',
      'file' => 'OsFeedReaderFetcher.inc',
      'path' => drupal_get_path('module', 'os_reader') . '/plugins',
    ),
  );
  $info['OsFeedFetcher'] = array(
    'name'        => t('OS feed fetcher'),
    'description' => t('Fetch feed item from urls.'),
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class'  => 'OsFeedFetcher',
      'file'   => 'OsFeedFetcher.inc',
      'path'   => drupal_get_path('module', 'os_reader') . '/plugins',
    ),
  );
  return $info;
}

/**
 * Create a news node based on a feed item.
 *
 * @param $feed
 *  The feed object to copy.
 * @param $vsite
 *  VSITE object to which to assign the new node.
 *
 * @return
 *   The newely created node object.
 */
function os_reader_copy_feed_item_to_news($feed, $vsite) {
  global $user;

  // Create the "News" node.
  $node = new stdClass();
  $node->type = 'news';
  $node->title = $feed->title;
  $node->language = LANGUAGE_NONE;

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->body->set(array('value' => $feed->description, 'format' => 'filtered_html'));
  $wrapper->field_news_date->set(time());
  $wrapper->{OG_AUDIENCE_FIELD}->set(array($vsite->id));
  $wrapper->author->set($user->uid);
  $wrapper->save();

  // Reference the feed to the node.
  $feed_wrapper = entity_metadata_wrapper('os_feed_item', $feed);
  $feed_wrapper->field_nodes_reference[] = $vsite->id;
  $feed_wrapper->save();

  return $node;
}

/**
 * Return TRUE if feed item already copied to VSite.
 *
 * @param $feed_id
 *  The feed ID.
 * @param $vsite_id
 *  The VSite ID.
 *
 * @return
 *  Return TRUE if the feed item was already copied to the VSite, otherwise
 *  return FALSE.
 */
function os_reader_is_feed_item_copied_to_vsite($feed_id, $vsite_id) {
  $wrapper = entity_metadata_wrapper('os_feed_item', $feed_id);

  if (!$vsite_ids = $wrapper->field_nodes_reference->value(array('identifier' => TRUE))) {
    return;
  }

  return in_array($vsite_id, $vsite_ids);
}

/**
 * Import feed item when the user add the feed importer for the first time.
 */
function os_reader_node_insert($node) {
  if (!$node->is_new || $node->type != 'feed_importer') {
    return;
  }

  feeds_source('os_reader', $node->nid)->startImport();
}

/**
 * Implements hook_node_preprocess().
 */
function os_reader_process_node(&$variables) {
  if (!$variables['page'] || $variables['page']['type'] != 'feed_importer') {
    return;
  }

  $url = 'os-reader';
  if ($vsite = vsite_get_vsite()) {
    $url = $vsite->group->name . '/' . $url;
  }

  drupal_goto('reader', array('fragment' => 'overlay=' . $url));
}
